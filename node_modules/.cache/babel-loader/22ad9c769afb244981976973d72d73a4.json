{"ast":null,"code":"/* eslint-disable no-unused-vars */\nimport { ElMessage } from \"element-plus\";\nimport { toRaw } from \"@vue/reactivity\";\nimport RobotOperation from \"./RobotOperation.vue\";\nimport { armStateEnum, robotStateEnum } from \"./enum\";\nimport { getMapList, switchMap, getMapInfo, getPositions, robotlocationConfirm // registerCallbackApi,\n} from \"@/service/map\";\nimport { getRobotInfoApi, robotNavigationApi } from \"@/service/robot\";\nexport default {\n  name: \"MapDashboard\",\n  // eslint-disable-next-line vue/no-unused-components\n  components: {\n    RobotOperation\n  },\n\n  data() {\n    return {\n      pos: {},\n      dialogPositionVisible: false,\n      dialogVisible: false,\n      selectedPosition: \"\",\n      defaultMap: \"\",\n      logo: require(\"@/assets/logo.png\"),\n      robotLogo: require(\"@/assets/images/robot.png\"),\n      canvasWidth: 1000,\n      //1200\n      canvasHeight: 500,\n      //600\n      imgScale: 1,\n      // 图片启示的缩放大小\n      count: 0,\n      // 用来记录机器人的位置是否连续5次一样，5次一样的话停止轮询\n      mapList: [],\n      currentMap: \"\",\n      mapLoading: false,\n      mapInfo: {},\n      positionsList: [],\n      robotInfo: {},\n      positionType: {\n        NAV_POS_TYPE: \"导航点位\",\n        PARK_POS_TYPE: \"停车点位\",\n        CHARGE_POS_TYPE: \"充电点位\",\n        ACTION_POS_TYPE: \"工作点位\"\n      },\n      canvasCtx: \"\",\n      robotState: \"\",\n      armState: \"\"\n    };\n  },\n\n  methods: {\n    mapstart(event) {\n      console.log(\"touchstart\", event);\n      this.pos = {\n        x: event.clientX,\n        y: event.clientY\n      };\n    },\n\n    mapmove(evt) {\n      console.log(\"touchmove\", evt);\n      var x = (evt.clientX - this.pos.x) * 2;\n      var y = (evt.clientY - this.pos.y) * 2;\n      this.clearCanvas();\n      this.getMapInfo(this.currentMap); //重新绘制图片\n    },\n\n    mapend() {\n      console.log(\"touchend\");\n    },\n\n    initCanvasEvent() {\n      var canvas = this.map;\n\n      canvas.touchstart = function (event) {\n        console.log(\"event\", event);\n        console.log(\"touchstart\");\n        var pos = {\n          x: event.clientX,\n          y: event.clientY\n        }; //坐标转换，将窗口坐标转换成canvas的坐标\n\n        canvas.touchmove = function (evt) {\n          //移动\n          console.log(\"touchmove\");\n          canvas.style.cursor = \"move\";\n          var x = (evt.clientX - pos.x) * 2;\n          var y = (evt.clientY - pos.y) * 2;\n          this.clearCanvas();\n          this.getMapInfo(this.currentMap); //重新绘制图片\n        };\n\n        canvas.touchend = function () {\n          console.log(\"touchend\");\n          canvas.touchmove = null;\n          canvas.touchend = null;\n          canvas.style.cursor = \"default\";\n        };\n      };\n    },\n\n    comfirePositionModel() {\n      robotlocationConfirm().then(res => {\n        if (res.code == 0) {\n          this.dialogPositionVisible = false;\n        }\n      });\n    },\n\n    //todo 重定向\n    rediretorPosition() {},\n\n    bigCanvas() {\n      this.imgScale *= 1.1;\n      this.clearCanvas();\n      this.getMapInfo(this.currentMap);\n    },\n\n    littleCanvas() {\n      this.imgScale *= 0.9;\n      this.clearCanvas();\n      this.getMapInfo(this.currentMap);\n    },\n\n    resetCanvas() {\n      this.imgScale = 1;\n      this.clearCanvas();\n      this.getMapInfo(this.currentMap);\n    },\n\n    changeMap() {\n      this.dialogVisible = true;\n    },\n\n    comfireModel() {\n      //确认切换地图\n      this.getMapInfo(this.currentMap);\n    },\n\n    startPolling() {\n      this.polling = setInterval(() => {\n        this.getMapInfo(this.currentMap);\n      }, 3000); // 3秒查询一次\n    },\n\n    async onNavClick() {\n      if (this.selectedPosition) {\n        const res = await robotNavigationApi({\n          destPosition: this.selectedPosition,\n          cmd: 0\n        });\n        const {\n          data,\n          code\n        } = res; // this.currentNavRequestId = data.requestId;\n\n        if (code === 0) {\n          ElMessage({\n            message: `导航开始，当前目标点：${this.positionsList.find(i => i.id === this.selectedPosition).type}`,\n            type: \"success\"\n          });\n          this.startPolling();\n        }\n      } else {\n        ElMessage({\n          message: `请先选择一个导航点`,\n          type: \"warning\"\n        });\n      }\n    },\n\n    async getCurrentRobotInfo() {\n      const {\n        data\n      } = await getRobotInfoApi();\n      this.robotInfo = data;\n      this.armState = armStateEnum[data.armState];\n      this.robotState = robotStateEnum[data.armState];\n\n      if (!data.locationCorrect) {\n        this.dialogPositionVisible = true;\n      } // if (data.map == this.currentMap) {\n\n\n      const {\n        x,\n        y\n      } = this.calculatePointPosition(data.x, data.y); // 渲染机器人位置\n      // console.log(\"渲染\", x, y);\n      // console.log(\"this.robotInfo333\", this.robotInfo.robotId);\n\n      this.drawPoint(this.robotInfo.robotId, this.robotLogo, x, y, 40); // }\n    },\n\n    async getMapList() {\n      const {\n        data\n      } = await getMapList();\n      console.log(\"getMapList\", data);\n      this.mapList = data.mapList;\n      this.currentMap = data.currentMap;\n      return data.mapList;\n    },\n\n    async getMapInfo(mapName) {\n      const {\n        data\n      } = await getMapInfo({\n        mapName,\n        containPixelData: true\n      });\n      console.log(\"MapInfo\", data);\n      this.mapInfo = data; // 获取到地图数据后渲染地图和相关位置点\n\n      if (this.mapList.length > 0) {\n        // let realWidth = data.width/data.resolution\n        // let realHeight = data.height/data.resolution\n        // let rate = realHeight/realWidth\n        this.canvasWidth = data.width / data.resolution;\n        this.canvasHeight = data.height / data.resolution;\n        this.dialogVisible = false;\n        this.drawMap(data.mapUrl, () => {\n          this.getMapPositions();\n        });\n      }\n    },\n\n    async getMapPositions() {\n      const {\n        data\n      } = await getPositions();\n      console.log(\"========getMapPositions\", data);\n      this.positionsList = data.posArray;\n      this.getCurrentRobotInfo();\n      data.posArray.forEach(item => {\n        const {\n          x,\n          y\n        } = this.calculatePointPosition(item.x, item.y); // 渲染地图上的点\n\n        this.drawPoint(item.id, this.logo, x, y, 20);\n      });\n    },\n\n    getCanvasCtx() {\n      const map = document.getElementById(\"map\");\n      const ctx = map.getContext(\"2d\");\n      this.canvasCtx = ctx;\n    },\n\n    clearCanvas() {\n      // TODO 目前是清空整个canvas重绘 后续可以针对某个点清空重绘？\n      this.canvasCtx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    },\n\n    drawMap(mapUrl, onImageLoadCallback) {\n      const img = new Image();\n      img.src = mapUrl; //  加载图片\n\n      img.onload = () => {\n        if (img.complete) {\n          this.canvasCtx.drawImage(img, 0, 0, this.canvasWidth * this.imgScale, this.canvasHeight * this.imgScale);\n\n          if (onImageLoadCallback) {\n            onImageLoadCallback();\n          }\n        }\n      };\n    },\n\n    async onMapSWitchClick(map) {\n      const {\n        code\n      } = await switchMap({\n        mapName: map\n      });\n\n      if (code === 0) {\n        this.currentMap = map;\n      }\n    },\n\n    calculatePointPosition(x, y) {\n      // 给的是地图左下角的点，canvas原点在左上角\n      console.log(\"机器人\", x, y);\n      let origin = {\n        x: this.mapInfo.leftBottomX,\n        y: this.mapInfo.leftBottomY\n      }; // 缩放倍数\n\n      let zoomScale = {\n        x: this.canvasWidth / this.mapInfo.width,\n        y: this.canvasHeight / this.mapInfo.height\n      };\n      return {\n        x: (x - origin.x) / this.mapInfo.resolution * this.imgScale,\n        y: (y - origin.y) / this.mapInfo.resolution * this.imgScale\n      };\n    },\n\n    drawPoint(text, logoUrl, x, y, dottedSize) {\n      const img = new Image();\n      img.src = logoUrl; //  加载图片\n\n      img.onload = () => {\n        if (img.complete) {\n          this.canvasCtx.drawImage(img, x, y, dottedSize, dottedSize); //todo 机器人旋转\n          // var degree = step * 90 * Math.PI / 180;\n          // ctx.rotate(degree);\n          // ctx.rotate(45 * Math.PI / 180);\n\n          this.canvasCtx.font = \"12px bold 黑体\";\n          this.canvasCtx.fillText(text, x + dottedSize, y + dottedSize); // if (onImageLoadCallback) {\n          //   onImageLoadCallback();\n          // }\n        }\n      };\n    }\n\n  },\n\n  mounted() {\n    this.getMapList().then(res => {\n      console.log(\"res\", res);\n      this.getMapInfo(res[res.length - 1]);\n      this.initCanvasEvent();\n    });\n    setInterval(() => {\n      this.getCurrentRobotInfo();\n    }, 800); // registerCallbackApi({\n    //   robotStatus: \"/robotStatus\",\n    //   resultNotify: \"/resultNotify\",\n    // });\n\n    this.getCanvasCtx();\n    this.drawMap(this.defaultMap);\n  },\n\n  watch: {\n    // currentMap(newVal) {\n    //   this.getMapInfo(newVal);\n    // },\n    robotInfo(newVal, oldVal) {\n      // 如果位置五次都一样，停止轮询\n      if (newVal.x === oldVal.x && newVal.y === oldVal.y) {\n        this.count += 1;\n\n        if (this.count > 5) {\n          clearInterval(this.polling);\n          this.polling = null;\n        }\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["ElMessage","toRaw","RobotOperation","armStateEnum","robotStateEnum","getMapList","switchMap","getMapInfo","getPositions","robotlocationConfirm","getRobotInfoApi","robotNavigationApi","name","components","data","pos","dialogPositionVisible","dialogVisible","selectedPosition","defaultMap","logo","require","robotLogo","canvasWidth","canvasHeight","imgScale","count","mapList","currentMap","mapLoading","mapInfo","positionsList","robotInfo","positionType","NAV_POS_TYPE","PARK_POS_TYPE","CHARGE_POS_TYPE","ACTION_POS_TYPE","canvasCtx","robotState","armState","methods","mapstart","event","console","log","x","clientX","y","clientY","mapmove","evt","clearCanvas","mapend","initCanvasEvent","canvas","map","touchstart","touchmove","style","cursor","touchend","comfirePositionModel","then","res","code","rediretorPosition","bigCanvas","littleCanvas","resetCanvas","changeMap","comfireModel","startPolling","polling","setInterval","onNavClick","destPosition","cmd","message","find","i","id","type","getCurrentRobotInfo","locationCorrect","calculatePointPosition","drawPoint","robotId","mapName","containPixelData","length","width","resolution","height","drawMap","mapUrl","getMapPositions","posArray","forEach","item","getCanvasCtx","document","getElementById","ctx","getContext","clearRect","onImageLoadCallback","img","Image","src","onload","complete","drawImage","onMapSWitchClick","origin","leftBottomX","leftBottomY","zoomScale","text","logoUrl","dottedSize","font","fillText","mounted","watch","newVal","oldVal","clearInterval"],"sourceRoot":"","sources":["D:\\Program Files\\web\\prj\\sendRobot\\src\\pages\\Dashboard\\components\\MapDashboard.vue"],"sourcesContent":["<template>\n  <div>\n    <div>\n      <div>\n        <div class=\"map-header\">\n          <div>\n            <span>地图列表</span>\n            <el-select\n              v-model=\"currentMap\"\n              class=\"m-2\"\n              placeholder=\"Select\"\n              size=\"large\"\n              style=\"margin-left: 10px\"\n            >\n              <el-option\n                v-for=\"(item, index) in mapList\"\n                :key=\"index\"\n                :label=\"item\"\n                :value=\"item\"\n              />\n            </el-select>\n            <el-button type=\"primary\" @click=\"changeMap\">切换地图</el-button>\n          </div>\n          <div>\n            当前地图：{{\n              this.robotInfo.map ? this.robotInfo.map : \"暂无\"\n            }}&nbsp;&nbsp;&nbsp;\n          </div>\n          <div class=\"map-footer\">\n            <span>目标站点</span>\n            <el-select\n              v-model=\"selectedPosition\"\n              class=\"m-2\"\n              placeholder=\"Select\"\n              size=\"large\"\n              style=\"margin-left: 10px\"\n            >\n              <el-option\n                v-for=\"item in positionsList\"\n                :key=\"item.id\"\n                :label=\"item.id\"\n                :value=\"item.id\"\n              />\n            </el-select>\n            <el-button type=\"primary\" @click=\"onNavClick\">导航</el-button>\n            <el-button type=\"primary\" @click=\"rediretorPosition\"\n              >重定位</el-button\n            >\n          </div>\n          <el-dialog v-model=\"dialogVisible\" title=\"Tips\" width=\"30%\">\n            <span>确认切换地图吗？</span>\n            <template #footer>\n              <span class=\"dialog-footer\">\n                <el-button @click=\"dialogVisible = false\">取消</el-button>\n                <el-button type=\"primary\" @click=\"comfireModel\">确认</el-button>\n              </span>\n            </template>\n          </el-dialog>\n          <!-- <div\n            v-for=\"(i, index) in mapList\"\n            :key=\"i\"\n            @click=\"onMapSWitchClick(i)\"\n            :class=\"currentMap === i ? 'map-radio select' : 'map-radio'\"\n            :style=\"{\n              marginBottom: index === mapList.length - 1 ? 0 : '5px',\n            }\"\n          >\n            {{ i }}\n          </div> -->\n        </div>\n      </div>\n      <div className=\"map-container\" id=\"map-container\" @touchstart=\"mapstart\" @touchmove=\"mapmove\" @touchend=\"mapend\">\n        <!--  :width=\"canvasWidth\"\n          :height=\"canvasHeight\" -->\n        <canvas\n          id=\"map\"\n          :width=\"canvasWidth\"\n          :height=\"canvasHeight\"\n          style=\"border: 1px solid #ccc\"\n        ></canvas>\n        <div class=\"btn-box\">\n          <div @click=\"bigCanvas\"><img src=\"@/assets/images/big.png\" /></div>\n          <div @click=\"littleCanvas\">\n            <img src=\"@/assets/images/little.png\" />\n          </div>\n          <div @click=\"resetCanvas\">\n            <img src=\"@/assets/images/reset.png\" />\n          </div>\n        </div>\n        <div class=\"state-box\">\n          <ul>\n            <li>机器人状态：{{ armState }}</li>\n            <li>机械臂处于原点：{{ robotInfo.armInHomePose ? \"是\" : \"否\" }}</li>\n            <li>AGV状态：{{ robotState }}</li>\n            <li>定位是否准确：{{ robotInfo.locationCorrect ? \"是\" : \"否\" }}</li>\n            <li>软急停开启：{{ robotInfo.softEmergency ? \"是\" : \"否\" }}</li>\n            <li>硬件急停按钮按下：{{ robotInfo.estop ? \"是\" : \"否\" }}</li>\n            <li>前方阻挡：</li>\n            <li>当前电量：{{ Number(robotInfo.power) * 100 }}%</li>\n          </ul>\n          <el-dialog v-model=\"dialogPositionVisible\" title=\"Tips\" width=\"30%\">\n            <span>定位不准确，点击确认进行重定位</span>\n            <template #footer>\n              <span class=\"dialog-footer\">\n                <el-button @click=\"dialogPositionVisible = false\"\n                  >取消</el-button\n                >\n                <el-button type=\"primary\" @click=\"comfirePositionModel\"\n                  >确认</el-button\n                >\n              </span>\n            </template>\n          </el-dialog>\n        </div>\n      </div>\n    </div>\n\n    <!-- <div className=\"right-area\">\n        <RobotOperation\n          :positionsList=\"positionsList\"\n          :drawPoint=\"drawPoint\"\n          :calculatePointPosition=\"calculatePointPosition\"\n          :initRobotInfo=\"robotInfo\"\n        />\n      </div> -->\n  </div>\n</template>\n\n<script>\n/* eslint-disable no-unused-vars */\nimport { ElMessage } from \"element-plus\";\nimport { toRaw } from \"@vue/reactivity\";\nimport RobotOperation from \"./RobotOperation.vue\";\nimport { armStateEnum, robotStateEnum } from \"./enum\";\nimport {\n  getMapList,\n  switchMap,\n  getMapInfo,\n  getPositions,\n  robotlocationConfirm,\n  // registerCallbackApi,\n} from \"@/service/map\";\nimport { getRobotInfoApi, robotNavigationApi } from \"@/service/robot\";\nexport default {\n  name: \"MapDashboard\",\n  // eslint-disable-next-line vue/no-unused-components\n  components: { RobotOperation },\n  data() {\n    return {\n      pos:{},\n      dialogPositionVisible: false,\n      dialogVisible: false,\n      selectedPosition: \"\",\n      defaultMap: \"\",\n      logo: require(\"@/assets/logo.png\"),\n      robotLogo: require(\"@/assets/images/robot.png\"),\n      canvasWidth: 1000, //1200\n      canvasHeight: 500, //600\n      imgScale: 1, // 图片启示的缩放大小\n      count: 0, // 用来记录机器人的位置是否连续5次一样，5次一样的话停止轮询\n      mapList: [],\n      currentMap: \"\",\n      mapLoading: false,\n      mapInfo: {},\n      positionsList: [],\n      robotInfo: {},\n      positionType: {\n        NAV_POS_TYPE: \"导航点位\",\n        PARK_POS_TYPE: \"停车点位\",\n        CHARGE_POS_TYPE: \"充电点位\",\n        ACTION_POS_TYPE: \"工作点位\",\n      },\n      canvasCtx: \"\",\n      robotState: \"\",\n      armState: \"\",\n    };\n  },\n  methods: {\n    mapstart(event){\n       console.log(\"touchstart\",event);\n       this.pos = { x: event.clientX, y: event.clientY };\n    },\n    mapmove(evt){\n       console.log(\"touchmove\",evt);\n        var x = (evt.clientX - this.pos.x) * 2\n        var y = (evt.clientY - this.pos.y) * 2\n        this.clearCanvas();\n        this.getMapInfo(this.currentMap); //重新绘制图片\n    },\n    mapend(){\n       console.log(\"touchend\");\n    },\n    initCanvasEvent() {\n      var canvas = this.map;\n      canvas.touchstart = function (event) {\n        console.log(\"event\",event)\n        console.log(\"touchstart\");\n        var pos = { x: event.clientX, y: event.clientY }; //坐标转换，将窗口坐标转换成canvas的坐标\n        canvas.touchmove = function (evt) {\n          //移动\n          console.log(\"touchmove\");\n          canvas.style.cursor = \"move\";\n\n          var x = (evt.clientX - pos.x) * 2\n          var y = (evt.clientY - pos.y) * 2\n          this.clearCanvas();\n          this.getMapInfo(this.currentMap); //重新绘制图片\n        };\n        canvas.touchend = function () {\n          console.log(\"touchend\");\n          canvas.touchmove = null;\n          canvas.touchend = null;\n          canvas.style.cursor = \"default\";\n        };\n      };\n    },\n    comfirePositionModel() {\n      robotlocationConfirm().then((res) => {\n        if (res.code == 0) {\n          this.dialogPositionVisible = false;\n        }\n      });\n    },\n    //todo 重定向\n    rediretorPosition() {},\n    bigCanvas() {\n      this.imgScale *= 1.1;\n      this.clearCanvas();\n      this.getMapInfo(this.currentMap);\n    },\n    littleCanvas() {\n      this.imgScale *= 0.9;\n      this.clearCanvas();\n      this.getMapInfo(this.currentMap);\n    },\n    resetCanvas() {\n      this.imgScale = 1;\n      this.clearCanvas();\n      this.getMapInfo(this.currentMap);\n    },\n    changeMap() {\n      this.dialogVisible = true;\n    },\n    comfireModel() {\n      //确认切换地图\n      this.getMapInfo(this.currentMap);\n    },\n    startPolling() {\n      this.polling = setInterval(() => {\n        this.getMapInfo(this.currentMap);\n      }, 3000); // 3秒查询一次\n    },\n    async onNavClick() {\n      if (this.selectedPosition) {\n        const res = await robotNavigationApi({\n          destPosition: this.selectedPosition,\n          cmd: 0,\n        });\n        const { data, code } = res;\n        // this.currentNavRequestId = data.requestId;\n        if (code === 0) {\n          ElMessage({\n            message: `导航开始，当前目标点：${\n              this.positionsList.find((i) => i.id === this.selectedPosition)\n                .type\n            }`,\n            type: \"success\",\n          });\n          this.startPolling();\n        }\n      } else {\n        ElMessage({\n          message: `请先选择一个导航点`,\n          type: \"warning\",\n        });\n      }\n    },\n    async getCurrentRobotInfo() {\n      const { data } = await getRobotInfoApi();\n      this.robotInfo = data;\n      this.armState = armStateEnum[data.armState];\n      this.robotState = robotStateEnum[data.armState];\n      if (!data.locationCorrect) {\n        this.dialogPositionVisible = true;\n      }\n      // if (data.map == this.currentMap) {\n      const { x, y } = this.calculatePointPosition(data.x, data.y);\n      // 渲染机器人位置\n      // console.log(\"渲染\", x, y);\n      // console.log(\"this.robotInfo333\", this.robotInfo.robotId);\n      this.drawPoint(this.robotInfo.robotId, this.robotLogo, x, y, 40);\n      // }\n    },\n    async getMapList() {\n      const { data } = await getMapList();\n      console.log(\"getMapList\", data);\n      this.mapList = data.mapList;\n      this.currentMap = data.currentMap;\n      return data.mapList;\n    },\n    async getMapInfo(mapName) {\n      const { data } = await getMapInfo({\n        mapName,\n        containPixelData: true,\n      });\n      console.log(\"MapInfo\", data);\n      this.mapInfo = data;\n      // 获取到地图数据后渲染地图和相关位置点\n      if (this.mapList.length > 0) {\n        // let realWidth = data.width/data.resolution\n        // let realHeight = data.height/data.resolution\n        // let rate = realHeight/realWidth\n        this.canvasWidth = data.width / data.resolution;\n        this.canvasHeight = data.height / data.resolution;\n        this.dialogVisible = false;\n        this.drawMap(data.mapUrl, () => {\n          this.getMapPositions();\n        });\n      }\n    },\n    async getMapPositions() {\n      const { data } = await getPositions();\n      console.log(\"========getMapPositions\", data);\n      this.positionsList = data.posArray;\n      this.getCurrentRobotInfo();\n      data.posArray.forEach((item) => {\n        const { x, y } = this.calculatePointPosition(item.x, item.y);\n        // 渲染地图上的点\n        this.drawPoint(item.id, this.logo, x, y, 20);\n      });\n    },\n    getCanvasCtx() {\n      const map = document.getElementById(\"map\");\n      const ctx = map.getContext(\"2d\");\n      this.canvasCtx = ctx;\n    },\n    clearCanvas() {\n      // TODO 目前是清空整个canvas重绘 后续可以针对某个点清空重绘？\n      this.canvasCtx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    },\n    drawMap(mapUrl, onImageLoadCallback) {\n      const img = new Image();\n      img.src = mapUrl;\n      //  加载图片\n      img.onload = () => {\n        if (img.complete) {\n          this.canvasCtx.drawImage(\n            img,\n            0,\n            0,\n            this.canvasWidth * this.imgScale,\n            this.canvasHeight * this.imgScale\n          );\n          if (onImageLoadCallback) {\n            onImageLoadCallback();\n          }\n        }\n      };\n    },\n    async onMapSWitchClick(map) {\n      const { code } = await switchMap({ mapName: map });\n      if (code === 0) {\n        this.currentMap = map;\n      }\n    },\n    calculatePointPosition(x, y) {\n      // 给的是地图左下角的点，canvas原点在左上角\n      console.log(\"机器人\", x, y);\n      let origin = {\n        x: this.mapInfo.leftBottomX,\n        y: this.mapInfo.leftBottomY,\n      };\n      // 缩放倍数\n      let zoomScale = {\n        x: this.canvasWidth / this.mapInfo.width,\n        y: this.canvasHeight / this.mapInfo.height,\n      };\n      return {\n        x: ((x - origin.x) / this.mapInfo.resolution) * this.imgScale,\n        y: ((y - origin.y) / this.mapInfo.resolution) * this.imgScale,\n      };\n    },\n    drawPoint(text, logoUrl, x, y, dottedSize) {\n      const img = new Image();\n      img.src = logoUrl;\n      //  加载图片\n      img.onload = () => {\n        if (img.complete) {\n          this.canvasCtx.drawImage(img, x, y, dottedSize, dottedSize);\n          //todo 机器人旋转\n          // var degree = step * 90 * Math.PI / 180;\n          // ctx.rotate(degree);\n          // ctx.rotate(45 * Math.PI / 180);\n          this.canvasCtx.font = \"12px bold 黑体\";\n          this.canvasCtx.fillText(text, x + dottedSize, y + dottedSize);\n          // if (onImageLoadCallback) {\n          //   onImageLoadCallback();\n          // }\n        }\n      };\n    },\n  },\n  mounted() {\n    this.getMapList().then((res) => {\n      console.log(\"res\", res);\n      this.getMapInfo(res[res.length - 1]);\n      this.initCanvasEvent()\n    });\n    setInterval(() => {\n      this.getCurrentRobotInfo();\n    }, 800);\n    // registerCallbackApi({\n    //   robotStatus: \"/robotStatus\",\n    //   resultNotify: \"/resultNotify\",\n    // });\n    this.getCanvasCtx();\n    this.drawMap(this.defaultMap);\n  },\n  watch: {\n    // currentMap(newVal) {\n    //   this.getMapInfo(newVal);\n    // },\n    robotInfo(newVal, oldVal) {\n      // 如果位置五次都一样，停止轮询\n      if (newVal.x === oldVal.x && newVal.y === oldVal.y) {\n        this.count += 1;\n        if (this.count > 5) {\n          clearInterval(this.polling);\n          this.polling = null;\n        }\n      }\n    },\n  },\n};\n</script>\n\n<style scoped lang=\"scss\">\n.map-container {\n  width: \"100%\";\n  height: 500px;\n}\n.dashboard-container {\n  display: flex;\n  /* justify-content: space-between; */\n}\n.map-header {\n  position: fixed;\n  top: 20px;\n  width: 1264px;\n  height: 80px;\n  display: flex;\n  align-items: center;\n  /* justify-content: space-between; */\n  margin-bottom: 10px;\n  background: #fff;\n}\n.map-container {\n  margin-top: 80px;\n}\n.map-radio {\n  border: 1px solid #f0f0f0;\n  padding: 5px 14px;\n  cursor: pointer;\n}\n.map-radio:hover {\n  border: 1px solid #adbbff;\n  color: #adbbff;\n}\n.map-radio.select {\n  border: 1px solid #6882ff;\n  color: #6882ff;\n}\n.state-box {\n  position: absolute;\n  top: 115px;\n  right: 70px;\n  width: 228px;\n  height: 500px;\n  background: rgba(242, 245, 247, 0.5);\n  box-shadow: -2px 0px 4px rgba(0, 0, 0, 0.12);\n  border-radius: 6px 0px 0px 6px;\n}\n.state-box ul {\n  list-style: none;\n  line-height: 50px;\n}\n.btn-box {\n  position: absolute;\n  top: 120px;\n  left: 1100px;\n  div {\n    margin-top: 10px;\n  }\n}\n.el-button.el-button--primary {\n  margin-left: 20px;\n  margin-right: 20px;\n}\n</style>"]},"metadata":{},"sourceType":"module"}