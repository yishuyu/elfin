{"ast":null,"code":"import { ref } from 'vue';\nimport '../../../../utils/index.mjs';\nimport { isNumber } from '@vueuse/core';\n\nconst useScrollbar = () => {\n  const scrollBarRef = ref();\n\n  const scrollTo = ({\n    top,\n    left\n  }) => {\n    setScrollTop(top);\n    setScrollLeft(left);\n  };\n\n  const setScrollPosition = (position, offset) => {\n    const scrollbar = scrollBarRef.value;\n\n    if (scrollbar && isNumber(offset) && [\"Top\", \"Left\"].includes(position)) {\n      scrollbar[`setScroll${position}`](offset);\n    }\n  };\n\n  const setScrollTop = top => setScrollPosition(\"Top\", top);\n\n  const setScrollLeft = left => setScrollPosition(\"Left\", left);\n\n  return {\n    scrollBarRef,\n    scrollTo,\n    setScrollTop,\n    setScrollLeft\n  };\n};\n\nexport { useScrollbar };","map":{"version":3,"mappings":";;;;AAEY,MAACA,YAAY,GAAG,MAAM;AAChC,QAAMC,YAAY,GAAGC,GAAG,EAAxB;;AACA,QAAMC,QAAQ,GAAG,CAAC;AAAEC,OAAF;AAAOC;AAAP,GAAD,KAAmB;AAClCC,gBAAY,CAACF,GAAD,CAAZ;AACAG,iBAAa,CAACF,IAAD,CAAb;AACD,GAHD;;AAIA,QAAMG,iBAAiB,GAAG,CAACC,QAAD,EAAWC,MAAX,KAAsB;AAC9C,UAAMC,SAAS,GAAGV,YAAY,CAACW,KAA/B;;AACA,QAAID,SAAS,IAAIE,QAAQ,CAACH,MAAD,CAArB,IAAiC,CAAC,KAAD,EAAQ,MAAR,EAAgBI,QAAhB,CAAyBL,QAAzB,CAArC,EAAyE;AACvEE,eAAS,CAAE,YAAWF,QAAS,EAAtB,CAAT,CAAkCC,MAAlC;AACD;AACF,GALD;;AAMA,QAAMJ,YAAY,GAAIF,GAAD,IAASI,iBAAiB,CAAC,KAAD,EAAQJ,GAAR,CAA/C;;AACA,QAAMG,aAAa,GAAIF,IAAD,IAAUG,iBAAiB,CAAC,MAAD,EAASH,IAAT,CAAjD;;AACA,SAAO;AACLJ,gBADK;AAELE,YAFK;AAGLG,gBAHK;AAILC;AAJK,GAAP;AAMF,CApBY","names":["useScrollbar","scrollBarRef","ref","scrollTo","top","left","setScrollTop","setScrollLeft","setScrollPosition","position","offset","scrollbar","value","isNumber","includes"],"sources":["../../../../../../../packages/components/table/src/composables/use-scrollbar.ts"],"sourcesContent":["import { ref } from 'vue'\nimport { isNumber } from '@element-plus/utils'\n\nexport const useScrollbar = () => {\n  const scrollBarRef = ref()\n\n  const scrollTo = ({ top, left }: { top?: number; left?: number }) => {\n    setScrollTop(top)\n    setScrollLeft(left)\n  }\n\n  const setScrollPosition = (position: 'Top' | 'Left', offset?: number) => {\n    const scrollbar = scrollBarRef.value\n    if (scrollbar && isNumber(offset) && ['Top', 'Left'].includes(position)) {\n      scrollbar[`setScroll${position}`](offset)\n    }\n  }\n\n  const setScrollTop = (top?: number) => setScrollPosition('Top', top)\n  const setScrollLeft = (left?: number) => setScrollPosition('Left', left)\n\n  return {\n    scrollBarRef,\n    scrollTo,\n    setScrollTop,\n    setScrollLeft,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}