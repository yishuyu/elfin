{"ast":null,"code":"/**\n * request 网络请求工具\n * 更详细的 api 文档\b: https://github.com/umijs/umi-request\n */\n// @ts-nocheck\nimport { extend } from 'umi-request';\nimport { ElMessage } from 'element-plus';\nimport _ from 'lodash'; // const codeMessage = {\n//   200: '服务器成功返回请求的数据。',\n//   201: '新建或修改数据成功。',\n//   302: '重定向。',\n//   202: '一个请求已经进入后台排队（异步任务）。',\n//   204: '删除数据成功。',\n//   400: '发出的请求有错误，服务器没有进行新建或修改数据的操作。',\n//   401: '用户没有权限（令牌、用户名、密码错误）。',\n//   403: '用户得到授权，但是访问是被禁止的。',\n//   404: '发出的请求针对的是不存在的记录，服务器没有进行操作。',\n//   406: '请求的格式不可得。',\n//   410: '请求的资源被永久删除，且不会再得到的。',\n//   422: '当创建一个对象时，发生一个验证错误。',\n//   500: '服务器发生错误，请检查服务器。',\n//   502: '网关错误。',\n//   503: '服务不可用，服务器暂时过载或维护。',\n//   504: '网关超时。',\n// };\n\nexport const codeMessage = {\n  0: '成功',\n  [-1]: '系统内部错误',\n  [-2]: '参数错误',\n  [-3]: '机器人状态异常',\n  [-4]: '当前操作不允许',\n  [-5]: '资源不存在',\n  [-6]: 'json解析失败',\n  [-7]: '空指针异常',\n  [-8]: 'socket错误 ',\n  [-9]: '文件IO错误 ',\n  [-10]: '值超出范围',\n  [-11]: '数据包格式错误',\n  [-100]: '导航目标点不存在',\n  [-101]: '导航目标点不可到达',\n  [-102]: '导航超时',\n  [-103]: '导航取消',\n  [-104]: '导航失败',\n  [-105]: 'agv api调用失败',\n  [-106]: '重定位失败',\n  [-200]: '机械臂发生碰撞',\n  [-201]: '机械臂目标点不可到达',\n  [-202]: '机械臂动作取消',\n  [-203]: '机械臂动作超时',\n  [-204]: '机械臂api调用失败',\n  [-300]: '餐柜食物到达顶层（在到达目标层之前）',\n  [-301]: '餐柜升降动作超时'\n};\n/**\n * 异常处理程序\n */\n\nconst errorHandler = error => {\n  ElMessage({\n    message: error,\n    type: 'error'\n  });\n  const {\n    response\n  } = error; // if (response && response.status) {\n  //   if (response.status === 401) {\n  //     window.location.href = `${window.location.protocol}//${window.location.host}/compass-monitor/login`;\n  //   } else {\n  //     const errorText = codeMessage[response.status] || response.statusText;\n  //     message.error(errorText, 3);\n  //   }\n  // }\n\n  return response;\n};\n/**\n * 配置request请求时的默认参数\n */\n\n\nconst request = extend({\n  errorHandler,\n  // 默认错误处理\n  credentials: 'include',\n  // 默认请求是否带上cookie\n  headers: {\n    'X-Requested-With': 'XMLHttpRequest',\n    'Content-Type': 'application/json'\n  }\n});\n\nconst openNotification = description => {\n  return ElMessage({\n    message: description,\n    type: 'error'\n  });\n};\n/**\n * @param {*object} url 接口url\n * @param {*object} params 接口相关的参数\n * @param {*object} otherParams 其他的配置\n */\n\n\nconst customRequest = (url, params) => new Promise((resolve, reject) => {\n  request(url, params).then(res => {\n    if (!res) {\n      return;\n    }\n\n    try {\n      const code = _.get(res, 'code', 0);\n\n      if (code === 0) {\n        resolve(res);\n        return;\n      }\n\n      if (code < 0) {\n        openNotification(codeMessage[code]);\n        resolve(res);\n      }\n    } catch (err) {\n      reject(err);\n    }\n  }).catch(error => {\n    reject(error);\n  });\n});\n\nexport default customRequest;","map":{"version":3,"sources":["D:/Program Files/web/prj/sendRobot/src/utils/request.js"],"names":["extend","ElMessage","_","codeMessage","errorHandler","error","message","type","response","request","credentials","headers","openNotification","description","customRequest","url","params","Promise","resolve","reject","then","res","code","get","err","catch"],"mappings":"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","sourcesContent":["/**\n * request 网络请求工具\n * 更详细的 api 文档\b: https://github.com/umijs/umi-request\n */\n// @ts-nocheck\nimport { extend } from 'umi-request';\nimport { ElMessage } from 'element-plus';\nimport _ from 'lodash';\n\n// const codeMessage = {\n//   200: '服务器成功返回请求的数据。',\n//   201: '新建或修改数据成功。',\n//   302: '重定向。',\n//   202: '一个请求已经进入后台排队（异步任务）。',\n//   204: '删除数据成功。',\n//   400: '发出的请求有错误，服务器没有进行新建或修改数据的操作。',\n//   401: '用户没有权限（令牌、用户名、密码错误）。',\n//   403: '用户得到授权，但是访问是被禁止的。',\n//   404: '发出的请求针对的是不存在的记录，服务器没有进行操作。',\n//   406: '请求的格式不可得。',\n//   410: '请求的资源被永久删除，且不会再得到的。',\n//   422: '当创建一个对象时，发生一个验证错误。',\n//   500: '服务器发生错误，请检查服务器。',\n//   502: '网关错误。',\n//   503: '服务不可用，服务器暂时过载或维护。',\n//   504: '网关超时。',\n// };\n\nexport const codeMessage = {\n  0: '成功',\n  [-1]: '系统内部错误',\n  [-2]: '参数错误',\n  [-3]: '机器人状态异常',\n  [-4]: '当前操作不允许',\n  [-5]: '资源不存在',\n  [-6]: 'json解析失败',\n  [-7]: '空指针异常',\n  [-8]: 'socket错误 ',\n  [-9]: '文件IO错误 ',\n  [-10]: '值超出范围',\n  [-11]: '数据包格式错误',\n  [-100]: '导航目标点不存在',\n  [-101]: '导航目标点不可到达',\n  [-102]: '导航超时',\n  [-103]: '导航取消',\n  [-104]: '导航失败',\n  [-105]: 'agv api调用失败',\n  [-106]: '重定位失败',\n  [-200]: '机械臂发生碰撞',\n  [-201]: '机械臂目标点不可到达',\n  [-202]: '机械臂动作取消',\n  [-203]: '机械臂动作超时',\n  [-204]: '机械臂api调用失败',\n  [-300]: '餐柜食物到达顶层（在到达目标层之前）',\n  [-301]: '餐柜升降动作超时',\n};\n\n/**\n * 异常处理程序\n */\nconst errorHandler = (error) => {\n  ElMessage({\n    message: error,\n    type: 'error',\n  });\n  const { response } = error;\n  // if (response && response.status) {\n  //   if (response.status === 401) {\n  //     window.location.href = `${window.location.protocol}//${window.location.host}/compass-monitor/login`;\n  //   } else {\n  //     const errorText = codeMessage[response.status] || response.statusText;\n  //     message.error(errorText, 3);\n  //   }\n  // }\n  return response;\n};\n\n/**\n * 配置request请求时的默认参数\n */\nconst request = extend({\n  errorHandler, // 默认错误处理\n  credentials: 'include', // 默认请求是否带上cookie\n  headers: {\n    'X-Requested-With': 'XMLHttpRequest',\n    'Content-Type': 'application/json',\n  },\n});\n\nconst openNotification = (description) => {\n  return ElMessage({\n    message: description,\n    type: 'error',\n  });\n};\n\n/**\n * @param {*object} url 接口url\n * @param {*object} params 接口相关的参数\n * @param {*object} otherParams 其他的配置\n */\n\nconst customRequest = (url, params) =>\n  new Promise((resolve, reject) => {\n    request(url, params)\n      .then((res) => {\n        if (!res) {\n          return;\n        }\n        try {\n          const code = _.get(res, 'code', 0);\n          if (code === 0) {\n            resolve(res);\n            return;\n          }\n          if (code < 0) {\n            openNotification(codeMessage[code]);\n            resolve(res);\n          }\n        } catch (err) {\n          reject(err);\n        }\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n\nexport default customRequest;\n"]},"metadata":{},"sourceType":"module"}