{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-9f8278bc\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  style: {\n    \"width\": \"1200px\",\n    \"display\": \"flex\",\n    \"align-items\": \"center\",\n    \"justify-content\": \"space-between\",\n    \"margin-bottom\": \"10px\"\n  }\n};\n\nconst _hoisted_2 = /*#__PURE__*/_createTextVNode(\"刷新机器人位置\");\n\nconst _hoisted_3 = /*#__PURE__*/_createTextVNode(\"导航\");\n\nconst _hoisted_4 = {\n  className: \"map-container\",\n  id: \"map-container\"\n};\nconst _hoisted_5 = [\"width\", \"height\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_button = _resolveComponent(\"el-button\");\n\n  const _component_el_option = _resolveComponent(\"el-option\");\n\n  const _component_el_select = _resolveComponent(\"el-select\");\n\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"div\", null, [_createElementVNode(\"div\", null, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"div\", null, \"当前地图：\" + _toDisplayString(this.robotInfo.map), 1\n  /* TEXT */\n  ), _createElementVNode(\"div\", null, [_createVNode(_component_el_button, {\n    type: \"primary\",\n    onClick: _cache[0] || (_cache[0] = $event => $options.getMapInfo($data.currentMap))\n  }, {\n    default: _withCtx(() => [_hoisted_2]),\n    _: 1\n    /* STABLE */\n\n  }), _createVNode(_component_el_button, {\n    type: \"primary\",\n    onClick: $options.onNavClick\n  }, {\n    default: _withCtx(() => [_hoisted_3]),\n    _: 1\n    /* STABLE */\n\n  }, 8\n  /* PROPS */\n  , [\"onClick\"]), _createVNode(_component_el_select, {\n    modelValue: $data.selectedPosition,\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.selectedPosition = $event),\n    class: \"m-2\",\n    placeholder: \"Select\",\n    size: \"large\",\n    style: {\n      \"margin-left\": \"10px\"\n    }\n  }, {\n    default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.positionsList, item => {\n      return _openBlock(), _createBlock(_component_el_option, {\n        key: item.id,\n        label: $data.positionType[item.type],\n        value: item.id\n      }, null, 8\n      /* PROPS */\n      , [\"label\", \"value\"]);\n    }), 128\n    /* KEYED_FRAGMENT */\n    ))]),\n    _: 1\n    /* STABLE */\n\n  }, 8\n  /* PROPS */\n  , [\"modelValue\"])]), _createCommentVNode(\" <div\\n            v-for=\\\"(i, index) in mapList\\\"\\n            :key=\\\"i\\\"\\n            @click=\\\"onMapSWitchClick(i)\\\"\\n            :class=\\\"currentMap === i ? 'map-radio select' : 'map-radio'\\\"\\n            :style=\\\"{\\n              marginBottom: index === mapList.length - 1 ? 0 : '5px',\\n            }\\\"\\n          >\\n            {{ i }}\\n          </div> \")])]), _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"canvas\", {\n    id: \"map\",\n    width: $data.canvasWidth,\n    height: $data.canvasHeight,\n    style: {\n      \"border\": \"1px solid #ccc\"\n    }\n  }, null, 8\n  /* PROPS */\n  , _hoisted_5)])]), _createCommentVNode(\" <div className=\\\"right-area\\\">\\n        <RobotOperation\\n          :positionsList=\\\"positionsList\\\"\\n          :drawPoint=\\\"drawPoint\\\"\\n          :calculatePointPosition=\\\"calculatePointPosition\\\"\\n          :initRobotInfo=\\\"robotInfo\\\"\\n        />\\n      </div> \")]);\n}","map":{"version":3,"mappings":";;;;;AAKUA,OAMC,EAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;iDAWK;;iDAE2C;;;AA8B/CC,WAAS,EAAC;AAAgBC,IAAE,EAAC;;;;;;;;;;uBA/CtCC,oBAiEM,KAjEN,EAiEM,IAjEN,EAiEM,CAhEJC,oBAsDM,KAtDN,EAsDM,IAtDN,EAsDM,CArDJA,oBA4CM,KA5CN,EA4CM,IA5CN,EA4CM,CA3CJA,oBA0CM,KA1CN,cA0CM,CAjCJA,oBAAwC,KAAxC,EAAwC,IAAxC,EAAK,UAAKC,sBAAQC,SAAR,CAAkBC,GAAlB,CAAV,EAA+B;AAAA;AAA/B,GAiCI,EAhCJH,oBAmBM,KAnBN,EAmBM,IAnBN,EAmBM,CAlBJI,aAECC,oBAFD,EAEC;AAFUC,QAAI,EAAC,SAEf;AAF0BC,WAAK,sCAAEC,oBAAWC,gBAAX,CAAF;AAE/B,GAFD;sBACG,MAAO;;;;GADV,CAkBI,EAfJL,aAA4DC,oBAA5D,EAA4D;AAAjDC,QAAI,EAAC,SAA4C;AAAjCC,WAAK,EAAEC;AAA0B,GAA5D;sBAA8C,MAAE;;;;GAAhD;;AAAA,gBAeI,EAdJJ,aAaYM,oBAbZ,EAaY;gBAZDD,sBAYC;+DAZDA,yBAAgBE,OAYf;AAXVC,SAAK,EAAC,KAWI;AAVVC,eAAW,EAAC,QAUF;AATVC,QAAI,EAAC,OASK;AARVlB,SAAyB,EAAzB;AAAA;AAAA;AAQU,GAbZ;sBAQI,MAA6B,oBAD/BG,oBAKEgB,SALF,EAKE,IALF,EAKEC,YAJeP,mBAIf,EAJOQ,IAAqB,IAAjB;2BADbC,aAKEC,oBALF,EAKE;AAHCC,WAAG,EAAEH,IAAI,CAACnB,EAGX;AAFCuB,aAAK,EAAEZ,mBAAaQ,IAAI,CAACX,IAAlB,CAER;AADCgB,aAAK,EAAEL,IAAI,CAACnB;AACb,OALF;;AAAA;KAKE,CALF;;AAAA,KAC+B;;;;GARjC;;AAAA,mBAcI,CAnBN,CAgCI,EAXJyB,8XAWI,CA1CN,CA2CI,CA5CN,CAqDI,EARJvB,oBAOM,KAPN,cAOM,CANJA,oBAKU,QALV,EAKU;AAJRF,MAAE,EAAC,KAIK;AAHP0B,SAAK,EAAEf,iBAGA;AAFPgB,UAAM,EAAEhB,kBAED;AADRb,SAA8B,EAA9B;AAAA;AAAA;AACQ,GALV;;AAAA,eAMI,CAPN,CAQI,CAtDN,CAgEI,EARJ2B,gSAQI,CAjEN","names":["style","className","id","_createElementBlock","_createElementVNode","_toDisplayString","robotInfo","map","_createVNode","_component_el_button","type","onClick","$options","$data","_component_el_select","$event","class","placeholder","size","_Fragment","_renderList","item","_createBlock","_component_el_option","key","label","value","_createCommentVNode","width","height"],"sourceRoot":"","sources":["D:\\Program Files\\web\\prj\\sendRobot\\src\\pages\\Dashboard\\components\\MapDashboard.vue"],"sourcesContent":["<template>\n  <div>\n    <div>\n      <div>\n        <div\n          style=\"\n            width: 1200px;\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            margin-bottom: 10px;\n          \"\n        >\n          <div>当前地图：{{ this.robotInfo.map }}</div>\n          <div>\n            <el-button type=\"primary\" @click=\"getMapInfo(currentMap)\"\n              >刷新机器人位置</el-button\n            >\n            <el-button type=\"primary\" @click=\"onNavClick\">导航</el-button>\n            <el-select\n              v-model=\"selectedPosition\"\n              class=\"m-2\"\n              placeholder=\"Select\"\n              size=\"large\"\n              style=\"margin-left: 10px\"\n            >\n              <el-option\n                v-for=\"item in positionsList\"\n                :key=\"item.id\"\n                :label=\"positionType[item.type]\"\n                :value=\"item.id\"\n              />\n            </el-select>\n          </div>\n\n          <!-- <div\n            v-for=\"(i, index) in mapList\"\n            :key=\"i\"\n            @click=\"onMapSWitchClick(i)\"\n            :class=\"currentMap === i ? 'map-radio select' : 'map-radio'\"\n            :style=\"{\n              marginBottom: index === mapList.length - 1 ? 0 : '5px',\n            }\"\n          >\n            {{ i }}\n          </div> -->\n        </div>\n      </div>\n      <div className=\"map-container\" id=\"map-container\">\n        <canvas\n          id=\"map\"\n          :width=\"canvasWidth\"\n          :height=\"canvasHeight\"\n          style=\"border: 1px solid #ccc\"\n        ></canvas>\n      </div>\n    </div>\n\n    <!-- <div className=\"right-area\">\n        <RobotOperation\n          :positionsList=\"positionsList\"\n          :drawPoint=\"drawPoint\"\n          :calculatePointPosition=\"calculatePointPosition\"\n          :initRobotInfo=\"robotInfo\"\n        />\n      </div> -->\n  </div>\n</template>\n\n<script>\n/* eslint-disable no-unused-vars */\nimport { ElMessage } from \"element-plus\";\nimport RobotOperation from \"./RobotOperation.vue\";\nimport {\n  getMapList,\n  switchMap,\n  getMapInfo,\n  getPositions,\n  registerCallbackApi,\n} from \"@/service/map\";\nimport { getRobotInfoApi, robotNavigationApi } from \"@/service/robot\";\nexport default {\n  name: \"MapDashboard\",\n  // eslint-disable-next-line vue/no-unused-components\n  components: { RobotOperation },\n  data() {\n    return {\n      selectedPosition: \"\",\n      defaultMap: require(\"@/assets/images/defaulmap.jpg\"),\n      logo: require(\"@/assets/logo.png\"),\n      robotLogo: require(\"@/assets/images/robot.png\"),\n      canvasWidth: 800, //1200\n      canvasHeight: 400, //600\n      count: 0, // 用来记录机器人的位置是否连续5次一样，5次一样的话停止轮询\n      mapList: {},\n      currentMap: \"\",\n      mapLoading: false,\n      mapInfo: {},\n      positionsList: [],\n      robotInfo: {},\n      positionType: {\n        NAV_POS_TYPE: \"导航点位\",\n        PARK_POS_TYPE: \"停车点位\",\n        CHARGE_POS_TYPE: \"充电点位\",\n        ACTION_POS_TYPE: \"工作点位\",\n      },\n      canvasCtx: \"\",\n    };\n  },\n  methods: {\n    startPolling() {\n      this.polling = setInterval(() => {\n        this.getMapInfo(this.currentMap);\n      }, 3000); // 3秒查询一次\n    },\n    async onNavClick() {\n      if (this.selectedPosition) {\n        const res = await robotNavigationApi({\n          destPosition: this.selectedPosition,\n          cmd: 0,\n        });\n        const { data, code } = res;\n        // this.currentNavRequestId = data.requestId;\n        if (code === 0) {\n          ElMessage({\n            message: `导航开始，当前目标点：${\n              this.positionsList.find((i) => i.id === this.selectedPosition)\n                .type\n            }`,\n            type: \"success\",\n          });\n          this.startPolling();\n        }\n      } else {\n        ElMessage({\n          message: `请先选择一个导航点`,\n          type: \"warning\",\n        });\n      }\n    },\n    async getCurrentRobotInfo() {\n      const { data } = await getRobotInfoApi();\n      this.robotInfo = data;\n      if (data.map === this.currentMap) {\n        const { x, y } = this.calculatePointPosition(data.x, data.y);\n        // 渲染机器人位置\n        this.drawPoint(this.robotInfo.robotId, this.robotLogo, x, y, 40);\n      }\n    },\n    async getMapList() {\n      const { data } = await getMapList();\n      this.mapList = data.mapList;\n      this.currentMap = data.currentMap;\n    },\n    async getMapInfo(mapName) {\n      const { data } = await getMapInfo({\n        mapName,\n        containPixelData: false,\n      });\n      this.mapInfo = data;\n      // 获取到地图数据后渲染地图和相关位置点\n      if (this.mapList.length > 0) {\n        this.drawMap(data.mapFile, () => {\n          this.getMapPositions();\n        });\n      }\n    },\n    async getMapPositions() {\n      const { data } = await getPositions();\n      this.positionsList = data.posArray;\n      this.getCurrentRobotInfo();\n      data.posArray.forEach((item) => {\n        const { x, y } = this.calculatePointPosition(item.x, item.y);\n        // 渲染地图上的点\n        this.drawPoint(this.positionType[item.type], this.logo, x, y, 20);\n      });\n    },\n    getCanvasCtx() {\n      const map = document.getElementById(\"map\");\n      const ctx = map.getContext(\"2d\");\n      this.canvasCtx = ctx;\n    },\n    clearCanvas() {\n      // TODO 目前是清空整个canvas重绘 后续可以针对某个点清空重绘？\n      this.canvasCtx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    },\n    drawMap(mapUrl, onImageLoadCallback) {\n      const img = new Image();\n      img.src = mapUrl;\n      //  加载图片\n      img.onload = () => {\n        if (img.complete) {\n          this.canvasCtx.drawImage(\n            img,\n            0,\n            0,\n            this.canvasWidth,\n            this.canvasHeight\n          );\n          if (onImageLoadCallback) {\n            onImageLoadCallback();\n          }\n        }\n      };\n    },\n    async onMapSWitchClick(map) {\n      const { code } = await switchMap({ mapName: map });\n      if (code === 0) {\n        this.currentMap = map;\n      }\n    },\n    calculatePointPosition(x, y) {\n      // 给的是地图左下角的点，canvas原点在左上角\n      const origin = {\n        x: this.mapInfo.leftBottomX,\n        y: this.mapInfo.leftBottomY - this.mapInfo.height,\n      };\n      // 缩放倍数\n      const zoomScale = {\n        x: this.canvasWidth / this.mapInfo.width,\n        y: this.canvasHeight / this.mapInfo.height,\n      };\n      return {\n        x: (x - origin.x) * zoomScale.x,\n        y: (y - origin.y) * zoomScale.y,\n      };\n    },\n    drawPoint(text, logoUrl, x, y, dottedSize) {\n      const img = new Image();\n      img.src = logoUrl;\n      //  加载图片\n      img.onload = () => {\n        if (img.complete) {\n          this.canvasCtx.drawImage(img, x, y, dottedSize, dottedSize);\n          this.canvasCtx.font = \"12px bold 黑体\";\n          this.canvasCtx.fillText(text, x + dottedSize, y + dottedSize);\n          // if (onImageLoadCallback) {\n          //   onImageLoadCallback();\n          // }\n        }\n      };\n    },\n  },\n  mounted() {\n    registerCallbackApi({\n      robotStatus: \"/robotStatus\",\n      resultNotify: \"/resultNotify\",\n    });\n    this.getMapList();\n    this.getCanvasCtx();\n    this.drawMap(this.defaultMap);\n  },\n  watch: {\n    currentMap(newVal) {\n      this.getMapInfo(newVal);\n    },\n    robotInfo(newVal, oldVal) {\n      // 如果位置五次都一样，停止轮询\n      if (newVal.x === oldVal.x && newVal.y === oldVal.y) {\n        this.count += 1;\n        if (this.count > 5) {\n          clearInterval(this.polling);\n          this.polling = null;\n        }\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.map-container {\n  width: \"100%\";\n}\n.dashboard-container {\n  display: flex;\n  /* justify-content: space-between; */\n}\n.map-radio {\n  border: 1px solid #f0f0f0;\n  padding: 5px 14px;\n  cursor: pointer;\n}\n.map-radio:hover {\n  border: 1px solid #adbbff;\n  color: #adbbff;\n}\n.map-radio.select {\n  border: 1px solid #6882ff;\n  color: #6882ff;\n}\n</style>"]},"metadata":{},"sourceType":"module"}