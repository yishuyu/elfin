{"ast":null,"code":"/* eslint-disable no-unused-vars */\nimport { ElMessage } from \"element-plus\";\nimport RobotOperation from \"./RobotOperation.vue\";\nimport { getMapList, switchMap, getMapInfo, getPositions, registerCallbackApi } from \"@/service/map\";\nimport { getRobotInfoApi, robotNavigationApi } from \"@/service/robot\";\nexport default {\n  name: \"MapDashboard\",\n  // eslint-disable-next-line vue/no-unused-components\n  components: {\n    RobotOperation\n  },\n\n  data() {\n    return {\n      selectedPosition: \"\",\n      defaultMap: require(\"@/assets/images/defaulmap.jpg\"),\n      logo: require(\"@/assets/logo.png\"),\n      robotLogo: require(\"@/assets/images/robot.png\"),\n      canvasWidth: 1000,\n      //1200\n      canvasHeight: 500,\n      //600\n      count: 0,\n      // 用来记录机器人的位置是否连续5次一样，5次一样的话停止轮询\n      mapList: [],\n      currentMap: \"\",\n      mapLoading: false,\n      mapInfo: {},\n      positionsList: [],\n      robotInfo: {},\n      positionType: {\n        NAV_POS_TYPE: \"导航点位\",\n        PARK_POS_TYPE: \"停车点位\",\n        CHARGE_POS_TYPE: \"充电点位\",\n        ACTION_POS_TYPE: \"工作点位\"\n      },\n      canvasCtx: \"\"\n    };\n  },\n\n  methods: {\n    startPolling() {\n      this.polling = setInterval(() => {\n        this.getMapInfo(this.currentMap);\n      }, 3000); // 3秒查询一次\n    },\n\n    async onNavClick() {\n      if (this.selectedPosition) {\n        const res = await robotNavigationApi({\n          destPosition: this.selectedPosition,\n          cmd: 0\n        });\n        const {\n          data,\n          code\n        } = res; // this.currentNavRequestId = data.requestId;\n\n        if (code === 0) {\n          ElMessage({\n            message: `导航开始，当前目标点：${this.positionsList.find(i => i.id === this.selectedPosition).type}`,\n            type: \"success\"\n          });\n          this.startPolling();\n        }\n      } else {\n        ElMessage({\n          message: `请先选择一个导航点`,\n          type: \"warning\"\n        });\n      }\n    },\n\n    async getCurrentRobotInfo() {\n      const {\n        data\n      } = await getRobotInfoApi();\n      this.robotInfo = data;\n\n      if (data.map === this.currentMap) {\n        const {\n          x,\n          y\n        } = this.calculatePointPosition(data.x, data.y); // 渲染机器人位置\n\n        this.drawPoint(this.robotInfo.robotId, this.robotLogo, x, y, 40);\n      }\n    },\n\n    async getMapList() {\n      const {\n        data\n      } = await getMapList();\n      this.mapList = data.mapList;\n      this.currentMap = data.currentMap;\n    },\n\n    async getMapInfo(mapName) {\n      const {\n        data\n      } = await getMapInfo({\n        mapName,\n        containPixelData: false\n      });\n      this.mapInfo = data; // 获取到地图数据后渲染地图和相关位置点\n\n      if (this.mapList.length > 0) {\n        this.drawMap(data.mapFile, () => {\n          this.getMapPositions();\n        });\n      }\n    },\n\n    async getMapPositions() {\n      const {\n        data\n      } = await getPositions();\n      this.positionsList = data.posArray;\n      this.getCurrentRobotInfo();\n      data.posArray.forEach(item => {\n        const {\n          x,\n          y\n        } = this.calculatePointPosition(item.x, item.y); // 渲染地图上的点\n\n        this.drawPoint(this.positionType[item.type], this.logo, x, y, 20);\n      });\n    },\n\n    getCanvasCtx() {\n      const map = document.getElementById(\"map\");\n      const ctx = map.getContext(\"2d\");\n      this.canvasCtx = ctx;\n    },\n\n    clearCanvas() {\n      // TODO 目前是清空整个canvas重绘 后续可以针对某个点清空重绘？\n      this.canvasCtx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    },\n\n    drawMap(mapUrl, onImageLoadCallback) {\n      const img = new Image();\n      img.src = mapUrl; //  加载图片\n\n      img.onload = () => {\n        if (img.complete) {\n          this.canvasCtx.drawImage(img, 0, 0, this.canvasWidth, this.canvasHeight);\n\n          if (onImageLoadCallback) {\n            onImageLoadCallback();\n          }\n        }\n      };\n    },\n\n    async onMapSWitchClick(map) {\n      const {\n        code\n      } = await switchMap({\n        mapName: map\n      });\n\n      if (code === 0) {\n        this.currentMap = map;\n      }\n    },\n\n    calculatePointPosition(x, y) {\n      // 给的是地图左下角的点，canvas原点在左上角\n      const origin = {\n        x: this.mapInfo.leftBottomX,\n        y: this.mapInfo.leftBottomY - this.mapInfo.height\n      }; // 缩放倍数\n\n      const zoomScale = {\n        x: this.canvasWidth / this.mapInfo.width,\n        y: this.canvasHeight / this.mapInfo.height\n      };\n      return {\n        x: (x - origin.x) * zoomScale.x,\n        y: (y - origin.y) * zoomScale.y\n      };\n    },\n\n    drawPoint(text, logoUrl, x, y, dottedSize) {\n      const img = new Image();\n      img.src = logoUrl; //  加载图片\n\n      img.onload = () => {\n        if (img.complete) {\n          this.canvasCtx.drawImage(img, x, y, dottedSize, dottedSize);\n          this.canvasCtx.font = \"12px bold 黑体\";\n          this.canvasCtx.fillText(text, x + dottedSize, y + dottedSize); // if (onImageLoadCallback) {\n          //   onImageLoadCallback();\n          // }\n        }\n      };\n    }\n\n  },\n\n  mounted() {\n    registerCallbackApi({\n      robotStatus: \"/robotStatus\",\n      resultNotify: \"/resultNotify\"\n    });\n    this.getMapList();\n    this.getCanvasCtx();\n    this.drawMap(this.defaultMap);\n  },\n\n  watch: {\n    currentMap(newVal) {\n      this.getMapInfo(newVal);\n    },\n\n    robotInfo(newVal, oldVal) {\n      // 如果位置五次都一样，停止轮询\n      if (newVal.x === oldVal.x && newVal.y === oldVal.y) {\n        this.count += 1;\n\n        if (this.count > 5) {\n          clearInterval(this.polling);\n          this.polling = null;\n        }\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["ElMessage","RobotOperation","getMapList","switchMap","getMapInfo","getPositions","registerCallbackApi","getRobotInfoApi","robotNavigationApi","name","components","data","selectedPosition","defaultMap","require","logo","robotLogo","canvasWidth","canvasHeight","count","mapList","currentMap","mapLoading","mapInfo","positionsList","robotInfo","positionType","NAV_POS_TYPE","PARK_POS_TYPE","CHARGE_POS_TYPE","ACTION_POS_TYPE","canvasCtx","methods","startPolling","polling","setInterval","onNavClick","res","destPosition","cmd","code","message","find","i","id","type","getCurrentRobotInfo","map","x","y","calculatePointPosition","drawPoint","robotId","mapName","containPixelData","length","drawMap","mapFile","getMapPositions","posArray","forEach","item","getCanvasCtx","document","getElementById","ctx","getContext","clearCanvas","clearRect","mapUrl","onImageLoadCallback","img","Image","src","onload","complete","drawImage","onMapSWitchClick","origin","leftBottomX","leftBottomY","height","zoomScale","width","text","logoUrl","dottedSize","font","fillText","mounted","robotStatus","resultNotify","watch","newVal","oldVal","clearInterval"],"sourceRoot":"","sources":["D:\\Program Files\\web\\prj\\sendRobot\\src\\pages\\Dashboard\\components\\MapDashboard.vue"],"sourcesContent":["<template>\n  <div>\n    <div>\n      <div>\n        <div class=\"map-header\">\n          <div>\n            <span>地图列表</span>\n            <el-select\n              v-model=\"currentMap\"\n              class=\"m-2\"\n              placeholder=\"Select\"\n              size=\"large\"\n              style=\"margin-left: 10px\"\n            >\n              <el-option\n                v-for=\"(item, index) in mapList\"\n                :key=\"index\"\n                :label=\"item[index]\"\n                :value=\"item[index]\"\n              />\n            </el-select>\n            <el-button type=\"primary\">应用</el-button>\n          </div>\n          <div>当前地图：{{ this.robotInfo.map }}</div>\n\n          <!-- <div\n            v-for=\"(i, index) in mapList\"\n            :key=\"i\"\n            @click=\"onMapSWitchClick(i)\"\n            :class=\"currentMap === i ? 'map-radio select' : 'map-radio'\"\n            :style=\"{\n              marginBottom: index === mapList.length - 1 ? 0 : '5px',\n            }\"\n          >\n            {{ i }}\n          </div> -->\n        </div>\n      </div>\n      <div className=\"map-container\" id=\"map-container\">\n        <canvas\n          id=\"map\"\n          :width=\"canvasWidth\"\n          :height=\"canvasHeight\"\n          style=\"border: 1px solid #ccc\"\n        ></canvas>\n      </div>\n    </div>\n    <div>\n      <el-button type=\"primary\" @click=\"getMapInfo(currentMap)\"\n        >刷新机器人位置</el-button\n      >\n      <el-button type=\"primary\" @click=\"onNavClick\">导航</el-button>\n      <el-select\n        v-model=\"selectedPosition\"\n        class=\"m-2\"\n        placeholder=\"Select\"\n        size=\"large\"\n        style=\"margin-left: 10px\"\n      >\n        <el-option\n          v-for=\"item in positionsList\"\n          :key=\"item.id\"\n          :label=\"positionType[item.type]\"\n          :value=\"item.id\"\n        />\n      </el-select>\n    </div>\n    <!-- <div className=\"right-area\">\n        <RobotOperation\n          :positionsList=\"positionsList\"\n          :drawPoint=\"drawPoint\"\n          :calculatePointPosition=\"calculatePointPosition\"\n          :initRobotInfo=\"robotInfo\"\n        />\n      </div> -->\n  </div>\n</template>\n\n<script>\n/* eslint-disable no-unused-vars */\nimport { ElMessage } from \"element-plus\";\nimport RobotOperation from \"./RobotOperation.vue\";\nimport {\n  getMapList,\n  switchMap,\n  getMapInfo,\n  getPositions,\n  registerCallbackApi,\n} from \"@/service/map\";\nimport { getRobotInfoApi, robotNavigationApi } from \"@/service/robot\";\nexport default {\n  name: \"MapDashboard\",\n  // eslint-disable-next-line vue/no-unused-components\n  components: { RobotOperation },\n  data() {\n    return {\n      selectedPosition: \"\",\n      defaultMap: require(\"@/assets/images/defaulmap.jpg\"),\n      logo: require(\"@/assets/logo.png\"),\n      robotLogo: require(\"@/assets/images/robot.png\"),\n      canvasWidth: 1000, //1200\n      canvasHeight: 500, //600\n      count: 0, // 用来记录机器人的位置是否连续5次一样，5次一样的话停止轮询\n      mapList: [],\n      currentMap: \"\",\n      mapLoading: false,\n      mapInfo: {},\n      positionsList: [],\n      robotInfo: {},\n      positionType: {\n        NAV_POS_TYPE: \"导航点位\",\n        PARK_POS_TYPE: \"停车点位\",\n        CHARGE_POS_TYPE: \"充电点位\",\n        ACTION_POS_TYPE: \"工作点位\",\n      },\n      canvasCtx: \"\",\n    };\n  },\n  methods: {\n    startPolling() {\n      this.polling = setInterval(() => {\n        this.getMapInfo(this.currentMap);\n      }, 3000); // 3秒查询一次\n    },\n    async onNavClick() {\n      if (this.selectedPosition) {\n        const res = await robotNavigationApi({\n          destPosition: this.selectedPosition,\n          cmd: 0,\n        });\n        const { data, code } = res;\n        // this.currentNavRequestId = data.requestId;\n        if (code === 0) {\n          ElMessage({\n            message: `导航开始，当前目标点：${\n              this.positionsList.find((i) => i.id === this.selectedPosition)\n                .type\n            }`,\n            type: \"success\",\n          });\n          this.startPolling();\n        }\n      } else {\n        ElMessage({\n          message: `请先选择一个导航点`,\n          type: \"warning\",\n        });\n      }\n    },\n    async getCurrentRobotInfo() {\n      const { data } = await getRobotInfoApi();\n      this.robotInfo = data;\n      if (data.map === this.currentMap) {\n        const { x, y } = this.calculatePointPosition(data.x, data.y);\n        // 渲染机器人位置\n        this.drawPoint(this.robotInfo.robotId, this.robotLogo, x, y, 40);\n      }\n    },\n    async getMapList() {\n      const { data } = await getMapList();\n      this.mapList = data.mapList;\n      this.currentMap = data.currentMap;\n    },\n    async getMapInfo(mapName) {\n      const { data } = await getMapInfo({\n        mapName,\n        containPixelData: false,\n      });\n      this.mapInfo = data;\n      // 获取到地图数据后渲染地图和相关位置点\n      if (this.mapList.length > 0) {\n        this.drawMap(data.mapFile, () => {\n          this.getMapPositions();\n        });\n      }\n    },\n    async getMapPositions() {\n      const { data } = await getPositions();\n      this.positionsList = data.posArray;\n      this.getCurrentRobotInfo();\n      data.posArray.forEach((item) => {\n        const { x, y } = this.calculatePointPosition(item.x, item.y);\n        // 渲染地图上的点\n        this.drawPoint(this.positionType[item.type], this.logo, x, y, 20);\n      });\n    },\n    getCanvasCtx() {\n      const map = document.getElementById(\"map\");\n      const ctx = map.getContext(\"2d\");\n      this.canvasCtx = ctx;\n    },\n    clearCanvas() {\n      // TODO 目前是清空整个canvas重绘 后续可以针对某个点清空重绘？\n      this.canvasCtx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    },\n    drawMap(mapUrl, onImageLoadCallback) {\n      const img = new Image();\n      img.src = mapUrl;\n      //  加载图片\n      img.onload = () => {\n        if (img.complete) {\n          this.canvasCtx.drawImage(\n            img,\n            0,\n            0,\n            this.canvasWidth,\n            this.canvasHeight\n          );\n          if (onImageLoadCallback) {\n            onImageLoadCallback();\n          }\n        }\n      };\n    },\n    async onMapSWitchClick(map) {\n      const { code } = await switchMap({ mapName: map });\n      if (code === 0) {\n        this.currentMap = map;\n      }\n    },\n    calculatePointPosition(x, y) {\n      // 给的是地图左下角的点，canvas原点在左上角\n      const origin = {\n        x: this.mapInfo.leftBottomX,\n        y: this.mapInfo.leftBottomY - this.mapInfo.height,\n      };\n      // 缩放倍数\n      const zoomScale = {\n        x: this.canvasWidth / this.mapInfo.width,\n        y: this.canvasHeight / this.mapInfo.height,\n      };\n      return {\n        x: (x - origin.x) * zoomScale.x,\n        y: (y - origin.y) * zoomScale.y,\n      };\n    },\n    drawPoint(text, logoUrl, x, y, dottedSize) {\n      const img = new Image();\n      img.src = logoUrl;\n      //  加载图片\n      img.onload = () => {\n        if (img.complete) {\n          this.canvasCtx.drawImage(img, x, y, dottedSize, dottedSize);\n          this.canvasCtx.font = \"12px bold 黑体\";\n          this.canvasCtx.fillText(text, x + dottedSize, y + dottedSize);\n          // if (onImageLoadCallback) {\n          //   onImageLoadCallback();\n          // }\n        }\n      };\n    },\n  },\n  mounted() {\n    registerCallbackApi({\n      robotStatus: \"/robotStatus\",\n      resultNotify: \"/resultNotify\",\n    });\n    this.getMapList();\n    this.getCanvasCtx();\n    this.drawMap(this.defaultMap);\n  },\n  watch: {\n    currentMap(newVal) {\n      this.getMapInfo(newVal);\n    },\n    robotInfo(newVal, oldVal) {\n      // 如果位置五次都一样，停止轮询\n      if (newVal.x === oldVal.x && newVal.y === oldVal.y) {\n        this.count += 1;\n        if (this.count > 5) {\n          clearInterval(this.polling);\n          this.polling = null;\n        }\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.map-container {\n  width: \"100%\";\n}\n.dashboard-container {\n  display: flex;\n  /* justify-content: space-between; */\n}\n.map-header {\n  width: 1200px;\n  display: flex;\n  align-items: center;\n  /* justify-content: space-between; */\n  margin-bottom: 10px;\n}\n.map-radio {\n  border: 1px solid #f0f0f0;\n  padding: 5px 14px;\n  cursor: pointer;\n}\n.map-radio:hover {\n  border: 1px solid #adbbff;\n  color: #adbbff;\n}\n.map-radio.select {\n  border: 1px solid #6882ff;\n  color: #6882ff;\n}\n</style>"]},"metadata":{},"sourceType":"module"}