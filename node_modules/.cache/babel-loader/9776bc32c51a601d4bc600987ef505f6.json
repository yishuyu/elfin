{"ast":null,"code":"/* eslint-disable no-unused-vars */\nimport { ElMessage } from \"element-plus\";\nimport { getRobotInfoApi, robotNavigationApi, getNavigationResultApi, ctrlArmApi, deleteErrors, armBackOrigin, armEndOrigin } from \"@/service/robot\";\nimport { codeMessage } from \"@/utils/request\";\nexport default {\n  name: \"RobotOperation\",\n  props: {\n    positionsList: Array,\n    drawPoint: Function,\n    calculatePointPosition: Function,\n    initRobotInfo: Object\n  },\n\n  data() {\n    return {\n      codeMessage: codeMessage,\n      robotInfo: {},\n      currentNavRequestId: \"\",\n      navResult: null,\n      polling: null,\n      navCmdMap: {\n        1: \"开始\",\n        2: \"暂停\",\n        3: \"继续\",\n        4: \"结束\"\n      },\n      validParam: {\n        0: \"powerOn\",\n        1: \"enable\",\n        2: \"stop\",\n        3: \"clearFaults\"\n      }\n    };\n  },\n\n  methods: {\n    async onArmBackOriginEnd() {\n      console.log('end');\n      let obj = {\n        cmd: 3\n      };\n      const res = await armEndOrigin(obj);\n    },\n\n    async onArmBackOrigin() {\n      console.log(111);\n      const res = await armBackOrigin();\n\n      if (res.code === 0) {\n        ElMessage({\n          message: `操作成功`,\n          type: \"success\"\n        });\n      }\n    },\n\n    async onDeleteErrors() {\n      const res = await deleteErrors();\n\n      if (res.code === 0) {\n        ElMessage({\n          message: `操作成功`,\n          type: \"success\"\n        });\n      }\n    },\n\n    async getRobotInfo() {\n      const {\n        data\n      } = await getRobotInfoApi();\n      this.robotInfo = data;\n      const {\n        x,\n        y\n      } = this.calculatePointPosition(data.x, data.y); // 渲染机器人位置\n\n      this.drawPoint(x, y, 20);\n    },\n\n    async changeRobotPosition({\n      destPosition,\n      cmd\n    }) {\n      this.navResult = null;\n      const res = await robotNavigationApi({\n        destPosition,\n        cmd\n      });\n      const {\n        data,\n        code\n      } = res;\n      this.currentNavRequestId = data.requestId;\n\n      if (code === 0) {\n        ElMessage({\n          message: `设置导航点成功，当前目标点：${this.positionsList.find(i => i.id === destPosition).type}`,\n          type: \"success\"\n        });\n        this.startPolling();\n      }\n    },\n\n    async getNavResultAndPosition() {\n      // 轮询状态接口 如果接收到数据则说明导航结束了，停止轮询\n      this.getRobotInfo();\n      const res = await getNavigationResultApi();\n\n      if (res.requestId === this.currentNavRequestId) {\n        // 请求id校验\n        this.navResult = res;\n      }\n    },\n\n    async controlArm(validParam, action, status) {\n      await ctrlArmApi({\n        validParam,\n        [action]: status,\n        armIndex: 0\n      }); //TODO 这里应该查询/轮询机器人状态？\n    },\n\n    startPolling() {\n      this.polling = setInterval(() => {\n        this.getNavResultAndPosition();\n      }, 1000); //1秒查询一次\n    }\n\n  },\n\n  mounted() {// 机器人初始信息通过父组件传过来 避免第一次加载地图可能点渲染不上\n    // this.getRobotInfo();\n  },\n\n  watch: {\n    navResult(newVal, oldVal) {\n      // 轮询状态 如果接收到数据则说明导航结束了，停止轮询\n      if (newVal) {\n        ElMessage({\n          message: `导航已经结束，当前状态：${codeMessage[newVal.errCode]}`,\n          type: \"success\"\n        });\n        clearInterval(this.polling);\n        this.polling = null;\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["ElMessage","getRobotInfoApi","robotNavigationApi","getNavigationResultApi","ctrlArmApi","deleteErrors","armBackOrigin","armEndOrigin","codeMessage","name","props","positionsList","Array","drawPoint","Function","calculatePointPosition","initRobotInfo","Object","data","robotInfo","currentNavRequestId","navResult","polling","navCmdMap","validParam","methods","onArmBackOriginEnd","console","log","obj","cmd","res","onArmBackOrigin","code","message","type","onDeleteErrors","getRobotInfo","x","y","changeRobotPosition","destPosition","requestId","find","i","id","startPolling","getNavResultAndPosition","controlArm","action","status","armIndex","setInterval","mounted","watch","newVal","oldVal","errCode","clearInterval"],"sourceRoot":"","sources":["D:\\Program Files\\web\\prj\\sendRobot\\src\\pages\\Dashboard\\components\\RobotOperation.vue"],"sourcesContent":["<template>\n  <!-- <div>\n    导航区域\n    <div v-for=\"i in positionsList\" :key=\"i.id\">\n      <el-button\n        type=\"primary\"\n        style=\"margin-top: 5px\"\n        @click=\"changeRobotPosition({ destPosition: i.id, cmd: 1 })\"\n        >{{ i.type }}</el-button\n      >\n    </div>\n  </div>\n  <div style=\"margin-top: 10px\">\n    <div>机器人当前状态</div>\n    {{ robotInfo.robotId ? robotInfo : initRobotInfo }}\n  </div>\n  <div v-if=\"polling\" style=\"margin-top: 10px\">\n    <el-button>暂停导航</el-button><el-button>结束导航</el-button>\n  </div>\n  <div v-if=\"navResult\" style=\"margin-top: 10px\">\n    <div>导航已结束，当前状态:{{ codeMessage[navResult.errCode] }}</div>\n  </div> -->\n  <div style=\"margin-top: 10px\">\n    <!-- <div>机械臂控制</div> -->\n    <div class=\"box\">\n      <div @click=\"controlArm(0, 'powerOn', true)\" class=\"task-button\">\n        上电\n      </div>\n      <div @click=\"controlArm(0, 'powerOn', false)\" class=\"task-button\">\n        断电\n      </div>\n      <div @click=\"controlArm(1, 'enable', true)\" class=\"task-button\">\n        使能机械臂\n      </div>\n      <div @click=\"controlArm(1, 'enable', false)\" class=\"task-button\">\n        去使能机械臂\n      </div>\n    </div>\n    <div class=\"box\">\n      <div @click=\"onDeleteErrors\" class=\"task-button\">清错</div>\n      <div @touchstart=\"onArmBackOrigin\" @touchend=\"onArmBackOriginEnd\" class=\"task-button\">机械臂长按回原点</div>\n      <div class=\"task-button\">开启零力示教</div>\n      <div class=\"task-button\">关闭零力示教</div>\n    </div>\n    <!-- <el-button @click=\"controlArm(1, 'enable', true)\">使能机械臂</el-button>\n    <el-button @click=\"controlArm(1, 'enable', false)\">去使能机械臂</el-button>\n    <el-button @click=\"controlArm(0, 'powerOn', true)\">上电</el-button>\n    <el-button @click=\"controlArm(0, 'powerOn', false)\">断电</el-button>\n    <el-button @click=\"controlArm(2, 'stop', true)\"\n      >停止机械臂当前动作</el-button\n    > -->\n  </div>\n</template>\n\n<script>\n/* eslint-disable no-unused-vars */\nimport { ElMessage } from \"element-plus\";\nimport {\n  getRobotInfoApi,\n  robotNavigationApi,\n  getNavigationResultApi,\n  ctrlArmApi,\n  deleteErrors,\n  armBackOrigin,\n  armEndOrigin,\n} from \"@/service/robot\";\nimport { codeMessage } from \"@/utils/request\";\nexport default {\n  name: \"RobotOperation\",\n  props: {\n    positionsList: Array,\n    drawPoint: Function,\n    calculatePointPosition: Function,\n    initRobotInfo: Object,\n  },\n  data() {\n    return {\n      codeMessage: codeMessage,\n      robotInfo: {},\n      currentNavRequestId: \"\",\n      navResult: null,\n      polling: null,\n      navCmdMap: {\n        1: \"开始\",\n        2: \"暂停\",\n        3: \"继续\",\n        4: \"结束\",\n      },\n      validParam: {\n        0: \"powerOn\",\n        1: \"enable\",\n        2: \"stop\",\n        3: \"clearFaults\",\n      },\n    };\n  },\n  methods: {\n    async onArmBackOriginEnd(){\n      console.log('end')\n      let obj = {\n        cmd:3\n      }\n      const res = await armEndOrigin(obj)   \n    },\n    async onArmBackOrigin() {\n      console.log(111)\n      const res = await armBackOrigin();\n      if (res.code === 0) {\n        ElMessage({\n          message: `操作成功`,\n          type: \"success\",\n        });\n      }\n    },\n    async onDeleteErrors() {\n      const res = await deleteErrors();\n      if (res.code === 0) {\n        ElMessage({\n          message: `操作成功`,\n          type: \"success\",\n        });\n      }\n    },\n    async getRobotInfo() {\n      const { data } = await getRobotInfoApi();\n      this.robotInfo = data;\n      const { x, y } = this.calculatePointPosition(data.x, data.y);\n      // 渲染机器人位置\n      this.drawPoint(x, y, 20);\n    },\n    async changeRobotPosition({ destPosition, cmd }) {\n      this.navResult = null;\n      const res = await robotNavigationApi({ destPosition, cmd });\n      const { data, code } = res;\n      this.currentNavRequestId = data.requestId;\n      if (code === 0) {\n        ElMessage({\n          message: `设置导航点成功，当前目标点：${\n            this.positionsList.find((i) => i.id === destPosition).type\n          }`,\n          type: \"success\",\n        });\n        this.startPolling();\n      }\n    },\n    async getNavResultAndPosition() {\n      // 轮询状态接口 如果接收到数据则说明导航结束了，停止轮询\n      this.getRobotInfo();\n      const res = await getNavigationResultApi();\n      if (res.requestId === this.currentNavRequestId) {\n        // 请求id校验\n        this.navResult = res;\n      }\n    },\n    async controlArm(validParam, action, status) {\n      await ctrlArmApi({ validParam, [action]: status, armIndex: 0 });\n      //TODO 这里应该查询/轮询机器人状态？\n    },\n    startPolling() {\n      this.polling = setInterval(() => {\n        this.getNavResultAndPosition();\n      }, 1000); //1秒查询一次\n    },\n  },\n  mounted() {\n    // 机器人初始信息通过父组件传过来 避免第一次加载地图可能点渲染不上\n    // this.getRobotInfo();\n  },\n  watch: {\n    navResult(newVal, oldVal) {\n      // 轮询状态 如果接收到数据则说明导航结束了，停止轮询\n      if (newVal) {\n        ElMessage({\n          message: `导航已经结束，当前状态：${codeMessage[newVal.errCode]}`,\n          type: \"success\",\n        });\n        clearInterval(this.polling);\n        this.polling = null;\n      }\n    },\n  },\n};\n</script>\n\n<style scoped lang='scss'>\n.box {\n  width: 100%;\n  display: flex;\n  margin: 0 auto;\n  .task-button {\n    width: 261px;\n    height: 147px;\n    background: linear-gradient(180deg, #f2f8ff 0%, #ffffff 112.66%);\n    box-shadow: 0px 0px 5px rgba(184, 190, 217, 0.5);\n    border-radius: 20.0355px;\n    border: 2px solid #9ABDF8;\n    margin-left:40px;\n    margin-top: 50px;\n    text-align: center;\n    line-height: 147px;\n  }\n}\n</style>"]},"metadata":{},"sourceType":"module"}