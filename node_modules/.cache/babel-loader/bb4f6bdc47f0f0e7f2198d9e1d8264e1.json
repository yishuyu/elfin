{"ast":null,"code":"import { ref, unref, watch, onMounted } from 'vue';\nimport { isClient, unrefElement } from '@vueuse/core';\nimport { isNil } from 'lodash-unified';\nimport { computePosition, arrow } from '@floating-ui/dom';\nimport '../../utils/index.mjs';\nimport { buildProps } from '../../utils/vue/props.mjs';\nconst useFloatingProps = buildProps({});\n\nconst unrefReference = elRef => {\n  if (!isClient) return;\n  if (!elRef) return elRef;\n  const unrefEl = unrefElement(elRef);\n  if (unrefEl) return unrefEl;\n  return elRef;\n};\n\nconst getPositionDataWithUnit = (record, key) => {\n  const value = record == null ? void 0 : record[key];\n  return isNil(value) ? \"\" : `${value}px`;\n};\n\nconst useFloating = ({\n  middleware,\n  placement,\n  strategy\n}) => {\n  const referenceRef = ref();\n  const contentRef = ref();\n  const x = ref();\n  const y = ref();\n  const middlewareData = ref({});\n  const states = {\n    x,\n    y,\n    placement,\n    strategy,\n    middlewareData\n  };\n\n  const update = async () => {\n    if (!isClient) return;\n    const referenceEl = unrefReference(referenceRef);\n    const contentEl = unrefElement(contentRef);\n    if (!referenceEl || !contentEl) return;\n    const data = await computePosition(referenceEl, contentEl, {\n      placement: unref(placement),\n      strategy: unref(strategy),\n      middleware: unref(middleware)\n    });\n    [\"x\", \"y\"].forEach(key => data[key] = getPositionDataWithUnit(data, key));\n    Object.keys(states).forEach(key => {\n      states[key].value = data[key];\n    });\n  };\n\n  watch(referenceRef, () => update());\n  watch(contentRef, () => update());\n  onMounted(() => update());\n  return { ...states,\n    update,\n    referenceRef,\n    contentRef\n  };\n};\n\nconst arrowMiddleware = ({\n  arrowRef,\n  padding\n}) => {\n  return {\n    name: \"arrow\",\n    options: {\n      element: arrowRef,\n      padding\n    },\n\n    fn(args) {\n      const arrowEl = unref(arrowRef);\n      if (!arrowEl) return {};\n      return arrow({\n        element: arrowEl,\n        padding\n      }).fn(args);\n    }\n\n  };\n};\n\nexport { arrowMiddleware, getPositionDataWithUnit, useFloating, useFloatingProps };","map":{"version":3,"mappings":"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","names":["useFloatingProps","buildProps","unrefReference","elRef","isClient","unrefEl","unrefElement","getPositionDataWithUnit","record","key","value","isNil","useFloating","middleware","placement","strategy","referenceRef","ref","contentRef","x","y","middlewareData","states","update","referenceEl","contentEl","data","computePosition","unref","forEach","Object","keys","watch","onMounted","arrowMiddleware","arrowRef","padding","name","options","element","fn","args","arrowEl","arrowCore"],"sources":["../../../../../packages/hooks/use-floating/index.ts"],"sourcesContent":["import { onMounted, ref, unref, watch } from 'vue'\nimport { isClient, unrefElement } from '@vueuse/core'\nimport { isNil } from 'lodash-unified'\nimport { arrow as arrowCore, computePosition } from '@floating-ui/dom'\n\nimport { buildProps } from '@element-plus/utils'\n\nimport type { Ref, ToRefs } from 'vue'\nimport type {\n  ComputePositionReturn,\n  Middleware,\n  Placement,\n  SideObject,\n  Strategy,\n  VirtualElement,\n} from '@floating-ui/dom'\n\nexport const useFloatingProps = buildProps({} as const)\n\nexport type UseFloatingProps = ToRefs<{\n  middleware: Array<Middleware>\n  placement: Placement\n  strategy: Strategy\n}>\n\ntype ElementRef = Parameters<typeof unrefElement>['0']\n\nconst unrefReference = (\n  elRef: ElementRef | Ref<VirtualElement | undefined>\n) => {\n  if (!isClient) return\n  if (!elRef) return elRef\n  const unrefEl = unrefElement(elRef as ElementRef)\n  if (unrefEl) return unrefEl\n  return elRef as VirtualElement\n}\n\nexport const getPositionDataWithUnit = <T extends Record<string, number>>(\n  record: T | undefined,\n  key: keyof T\n) => {\n  const value = record?.[key]\n  return isNil(value) ? '' : `${value}px`\n}\n\nexport const useFloating = ({\n  middleware,\n  placement,\n  strategy,\n}: UseFloatingProps) => {\n  const referenceRef = ref<HTMLElement | VirtualElement>()\n  const contentRef = ref<HTMLElement>()\n  const x = ref<string>()\n  const y = ref<string>()\n  const middlewareData = ref<ComputePositionReturn['middlewareData']>({})\n\n  const states = {\n    x,\n    y,\n    placement,\n    strategy,\n    middlewareData,\n  } as const\n\n  const update = async () => {\n    if (!isClient) return\n\n    const referenceEl = unrefReference(referenceRef)\n    const contentEl = unrefElement(contentRef)\n\n    if (!referenceEl || !contentEl) return\n\n    const data = await computePosition(referenceEl, contentEl, {\n      placement: unref(placement),\n      strategy: unref(strategy),\n      middleware: unref(middleware),\n    })\n\n    ;['x', 'y'].forEach(\n      (key) => (data[key] = getPositionDataWithUnit(data as any, key))\n    )\n\n    Object.keys(states).forEach((key) => {\n      states[key].value = data[key]\n    })\n  }\n\n  watch(referenceRef, () => update())\n\n  watch(contentRef, () => update())\n\n  onMounted(() => update())\n\n  return {\n    ...states,\n    update,\n    referenceRef,\n    contentRef,\n  }\n}\n\nexport type ArrowMiddlewareProps = {\n  arrowRef: Ref<HTMLElement | undefined>\n  padding?: number | SideObject\n}\n\nexport const arrowMiddleware = ({\n  arrowRef,\n  padding,\n}: ArrowMiddlewareProps): Middleware => {\n  return {\n    name: 'arrow',\n    options: {\n      element: arrowRef,\n      padding,\n    },\n\n    fn(args) {\n      const arrowEl = unref(arrowRef)\n      if (!arrowEl) return {}\n\n      return arrowCore({\n        element: arrowEl,\n        padding,\n      }).fn(args)\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}