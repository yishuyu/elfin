{"ast":null,"code":"import { normalizeStyle as _normalizeStyle, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = [\"width\", \"height\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"canvas\", {\n    ref: \"bargraphCanvas\",\n    width: $data.canvasWidth,\n    height: $data.canvasHeight,\n    style: _normalizeStyle('width:' + $data.canvasWidth / 2 + 'px;height:' + $data.canvasHeight / 2 + 'px;')\n  }, null, 12, _hoisted_1);\n}","map":{"version":3,"mappings":";;;uBACEA,oBAAoJ,QAApJ,EAAoJ;AAA5IC,OAAG,EAAC,gBAAwI;AAAtHC,SAAK,EAAEC,iBAA+G;AAAjGC,UAAM,EAAED,kBAAyF;AAA1EE,SAAK,6BAAWF,oBAAW,CAAtB,GAAsB,YAAtB,GAAsCA,qBAAY,CAAlD,GAAkD,KAAlD;AAAqE,GAApJ","names":["_createElementBlock","ref","width","$data","height","style"],"sourceRoot":"","sources":["D:\\Program Files\\web\\prj\\sendRobot\\src\\pages\\Dashboard\\components\\TestCanvas.vue"],"sourcesContent":["<template>\r\n  <canvas ref=\"bargraphCanvas\" :width=\"canvasWidth\" :height=\"canvasHeight\" :style=\"'width:'+canvasWidth/2+'px;height:'+canvasHeight/2+'px;'\"></canvas>\r\n</template>\r\n\r\n<script>\r\n  export default {\r\n    name: 'laborImage',\r\n    components: {\r\n    },\r\n    data() {\r\n      return {\r\n        canvasWidth: 2400, // 画布大小\r\n        canvasHeight: 1400,\r\n        extraImgList: [\r\n            {url:require(\"@/assets/images/defaulmap.jpg\"), x: 0, y: 0, width: 2400, height: 1400},\r\n            {url:require(\"@/assets/images/robot.png\"), x: 700, y: 100, width: 40, height: 40}         \r\n        ],\r\n        myCanvas: null,\r\n        ctx: null,\r\n        imgObject: [],\r\n        imgX: 200, // 图片在画布中渲染的起点x坐标\r\n        imgY: 100,\r\n        imgScale: 0.9, // 图片的缩放大小\r\n      }\r\n    },\r\n    mounted() {\r\n      this.myCanvas = this.$refs.bargraphCanvas;\r\n      this.ctx = this.myCanvas.getContext('2d');\r\n      this.loadImg();\r\n      this.canvasEventsInit();\r\n    },\r\n    methods: {\r\n      loadImg() {\r\n        var _this = this;\r\n        let extraImgList = _this.extraImgList;\r\n        let length = extraImgList.length;\r\n        var imageList = [];\r\n        let count = 0;\r\n        //加载背景图片\r\n        // var isBgLoaded = false;\r\n        var img = new Image();\r\n        var bgImg = extraImgList[0];\r\n        img.src = bgImg.url;\r\n        img.onload = () => {\r\n          imageList.push({img: img, x: bgImg.x, y: bgImg.y, width: bgImg.width, height: bgImg.height});\r\n          ++count;\r\n          if(length > 1) {\r\n            //加载剩余图片\r\n            for(let key = 1; key < length; key++) {\r\n              let item = extraImgList[key];\r\n              let extarImg = new Image();\r\n              extarImg.src = item.url;\r\n              extarImg.onload = () => {\r\n                imageList.push({img: extarImg, x: item.x, y: item.y, width: item.width, height: item.height})\r\n                if(++count >= length) {\r\n                  _this.imgObject = imageList;\r\n                  _this.drawImage(imageList);\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            _this.imgObject = imageList;\r\n             _this.drawImage(imageList);\r\n          }\r\n        }\r\n      },\r\n      drawImage(imgList) {\r\n        var _this = this;\r\n        _this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\r\n        for(let i = 0; i < imgList.length; i++) {\r\n          _this.ctx.drawImage(\r\n            imgList[i].img, //规定要使用的图片\r\n            _this.imgX + imgList[i].x * _this.imgScale, _this.imgY+ imgList[i].y * _this.imgScale,//在画布上放置图像的 x 、y坐标位置。\r\n            imgList[i].width*_this.imgScale, imgList[i].height*_this.imgScale //要使用的图像的宽度、高度\r\n          );\r\n        }\r\n        // this.ctx.font=\"15px Arial\";\r\n        // this.ctx.fillStyle = \"black\"\r\n        // this.ctx.fillText(\"name\",this.imgX + 120 * this.imgScale, this.imgY+ 25 * this.imgScale);\r\n      },\r\n      /**\r\n       * 为画布上鼠标的拖动和缩放注册事件\r\n      */\r\n      canvasEventsInit() {\r\n        var _this = this;\r\n        var canvas = _this.myCanvas;\r\n       \r\n        canvas.onmousedown = function (event) {\r\n          var imgx = _this.imgX;\r\n          var imgy = _this.imgY;\r\n          var pos = {x:event.clientX, y:event.clientY};  //坐标转换，将窗口坐标转换成canvas的坐标\r\n          canvas.onmousemove = function (evt) {  //移动\r\n            canvas.style.cursor = 'move';\r\n\r\n            var x = (evt.clientX - pos.x) * 2 + imgx;\r\n            var y = (evt.clientY - pos.y) * 2 + imgy;\r\n            _this.imgX  = x;\r\n            _this.imgY  = y;\r\n            _this.drawImage(_this.imgObject);  //重新绘制图片\r\n          };\r\n          canvas.onmouseup = function () {\r\n            canvas.onmousemove = null;\r\n            canvas.onmouseup = null;\r\n            canvas.style.cursor = 'default';\r\n          };\r\n        };\r\n  \r\n        canvas.onmousewheel = canvas.onwheel = function (event) {    //滚轮放大缩小\r\n          var wheelDelta = event.wheelDelta ? event.wheelDelta : (event.deltalY * (-40));  //获取当前鼠标的滚动情况\r\n          if (wheelDelta > 0) {\r\n              _this.imgScale *= 1.1;\r\n          } else {\r\n              if(_this.imgScale > 0.9) {\r\n                 _this.imgScale *= 0.9;\r\n              }\r\n          }\r\n          _this.drawImage(_this.imgObject);   //重新绘制图片\r\n          event.preventDefault  && event.preventDefault();\r\n          return false;\r\n        };\r\n      },\r\n    },\r\n  }\r\n</script>"]},"metadata":{},"sourceType":"module"}