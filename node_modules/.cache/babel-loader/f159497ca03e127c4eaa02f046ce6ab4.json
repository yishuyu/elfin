{"ast":null,"code":"/* eslint-disable no-unused-vars */\nimport { ElMessage } from \"element-plus\";\nimport { toRaw } from \"@vue/reactivity\";\nimport RobotOperation from \"./RobotOperation.vue\";\nimport { getMapList, switchMap, getMapInfo, getPositions, registerCallbackApi } from \"@/service/map\";\nimport { getRobotInfoApi, robotNavigationApi } from \"@/service/robot\";\nexport default {\n  name: \"MapDashboard\",\n  // eslint-disable-next-line vue/no-unused-components\n  components: {\n    RobotOperation\n  },\n\n  data() {\n    return {\n      dialogVisible: false,\n      selectedPosition: \"\",\n      defaultMap: \"\",\n      logo: require(\"@/assets/logo.png\"),\n      robotLogo: require(\"@/assets/images/robot.png\"),\n      canvasWidth: 1000,\n      //1200\n      canvasHeight: 500,\n      //600\n      imgScale: 1,\n      // 图片启示的缩放大小\n      count: 0,\n      // 用来记录机器人的位置是否连续5次一样，5次一样的话停止轮询\n      mapList: [],\n      currentMap: \"\",\n      mapLoading: false,\n      mapInfo: {},\n      positionsList: [],\n      robotInfo: {},\n      positionType: {\n        NAV_POS_TYPE: \"导航点位\",\n        PARK_POS_TYPE: \"停车点位\",\n        CHARGE_POS_TYPE: \"充电点位\",\n        ACTION_POS_TYPE: \"工作点位\"\n      },\n      canvasCtx: \"\"\n    };\n  },\n\n  methods: {\n    //todo 重定向\n    rediretorPosition() {},\n\n    bigCanvas() {\n      this.imgScale *= 1.1;\n      this.getMapInfo(this.currentMap);\n    },\n\n    littleCanvas() {\n      this.imgScale *= 0.9;\n      this.getMapInfo(this.currentMap);\n    },\n\n    resetCanvas() {\n      this.imgScale = 1;\n      this.getMapInfo(this.currentMap);\n    },\n\n    changeMap() {\n      this.dialogVisible = true;\n    },\n\n    comfireModel() {\n      //确认切换地图\n      this.getMapInfo(this.currentMap);\n    },\n\n    startPolling() {\n      this.polling = setInterval(() => {\n        this.getMapInfo(this.currentMap);\n      }, 3000); // 3秒查询一次\n    },\n\n    async onNavClick() {\n      if (this.selectedPosition) {\n        const res = await robotNavigationApi({\n          destPosition: this.selectedPosition,\n          cmd: 0\n        });\n        const {\n          data,\n          code\n        } = res; // this.currentNavRequestId = data.requestId;\n\n        if (code === 0) {\n          ElMessage({\n            message: `导航开始，当前目标点：${this.positionsList.find(i => i.id === this.selectedPosition).type}`,\n            type: \"success\"\n          });\n          this.startPolling();\n        }\n      } else {\n        ElMessage({\n          message: `请先选择一个导航点`,\n          type: \"warning\"\n        });\n      }\n    },\n\n    async getCurrentRobotInfo() {\n      const {\n        data\n      } = await getRobotInfoApi();\n      this.robotInfo = data; // if (data.map == this.currentMap) {\n\n      const {\n        x,\n        y\n      } = this.calculatePointPosition(data.x, data.y); // 渲染机器人位置\n\n      console.log(\"渲染\", x, y);\n      console.log(\"this.robotInfo333\", this.robotInfo.robotId);\n      this.drawPoint(this.robotInfo.robotId, this.robotLogo, x, y, 40); // }\n    },\n\n    async getMapList() {\n      const {\n        data\n      } = await getMapList();\n      console.log(\"getMapList\", data);\n      this.mapList = data.mapList;\n      this.currentMap = data.currentMap;\n      return data.mapList;\n    },\n\n    async getMapInfo(mapName) {\n      const {\n        data\n      } = await getMapInfo({\n        mapName,\n        containPixelData: true\n      });\n      console.log(\"MapInfo\", data);\n      this.mapInfo = data; // 获取到地图数据后渲染地图和相关位置点\n\n      if (this.mapList.length > 0) {\n        // let realWidth = data.width/data.resolution\n        // let realHeight = data.height/data.resolution\n        // let rate = realHeight/realWidth\n        this.canvasWidth = data.width / data.resolution;\n        this.canvasHeight = data.height / data.resolution;\n        this.dialogVisible = false;\n        this.drawMap(data.mapUrl, () => {\n          this.getMapPositions();\n        });\n      }\n    },\n\n    async getMapPositions() {\n      const {\n        data\n      } = await getPositions();\n      console.log(\"========getMapPositions\", data);\n      this.positionsList = data.posArray;\n      this.getCurrentRobotInfo();\n      data.posArray.forEach(item => {\n        const {\n          x,\n          y\n        } = this.calculatePointPosition(item.x, item.y); // 渲染地图上的点\n\n        this.drawPoint(item.id, this.logo, x, y, 20);\n      });\n    },\n\n    getCanvasCtx() {\n      const map = document.getElementById(\"map\");\n      const ctx = map.getContext(\"2d\");\n      this.canvasCtx = ctx;\n    },\n\n    clearCanvas() {\n      // TODO 目前是清空整个canvas重绘 后续可以针对某个点清空重绘？\n      this.canvasCtx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    },\n\n    drawMap(mapUrl, onImageLoadCallback) {\n      const img = new Image();\n      img.src = mapUrl; //  加载图片\n\n      img.onload = () => {\n        if (img.complete) {\n          this.canvasCtx.drawImage(img, 0, 0, this.canvasWidth * this.imgScale, this.canvasHeight * this.imgScale);\n\n          if (onImageLoadCallback) {\n            onImageLoadCallback();\n          }\n        }\n      };\n    },\n\n    async onMapSWitchClick(map) {\n      const {\n        code\n      } = await switchMap({\n        mapName: map\n      });\n\n      if (code === 0) {\n        this.currentMap = map;\n      }\n    },\n\n    calculatePointPosition(x, y) {\n      // 给的是地图左下角的点，canvas原点在左上角\n      console.log(\"机器人\", x, y);\n      let origin = {\n        x: this.mapInfo.leftBottomX,\n        y: this.mapInfo.leftBottomY\n      }; // 缩放倍数\n\n      let zoomScale = {\n        x: this.canvasWidth / this.mapInfo.width,\n        y: this.canvasHeight / this.mapInfo.height\n      };\n      return {\n        x: (x - origin.x) / this.mapInfo.resolution,\n        y: (y - origin.y) / this.mapInfo.resolution\n      };\n    },\n\n    drawPoint(text, logoUrl, x, y, dottedSize) {\n      const img = new Image();\n      img.src = logoUrl; //  加载图片\n\n      img.onload = () => {\n        if (img.complete) {\n          this.canvasCtx.drawImage(img, x, y, dottedSize, dottedSize);\n          this.canvasCtx.font = \"12px bold 黑体\";\n          this.canvasCtx.fillText(text, x + dottedSize, y + dottedSize); // if (onImageLoadCallback) {\n          //   onImageLoadCallback();\n          // }\n        }\n      };\n    }\n\n  },\n\n  mounted() {\n    this.getMapList().then(res => {\n      console.log(\"res\", res);\n      this.getMapInfo(res[res.length - 1]);\n    });\n    this.getCurrentRobotInfo();\n    registerCallbackApi({\n      robotStatus: \"/robotStatus\",\n      resultNotify: \"/resultNotify\"\n    });\n    this.getCanvasCtx();\n    this.drawMap(this.defaultMap);\n  },\n\n  watch: {\n    // currentMap(newVal) {\n    //   this.getMapInfo(newVal);\n    // },\n    robotInfo(newVal, oldVal) {\n      // 如果位置五次都一样，停止轮询\n      if (newVal.x === oldVal.x && newVal.y === oldVal.y) {\n        this.count += 1;\n\n        if (this.count > 5) {\n          clearInterval(this.polling);\n          this.polling = null;\n        }\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["ElMessage","toRaw","RobotOperation","getMapList","switchMap","getMapInfo","getPositions","registerCallbackApi","getRobotInfoApi","robotNavigationApi","name","components","data","dialogVisible","selectedPosition","defaultMap","logo","require","robotLogo","canvasWidth","canvasHeight","imgScale","count","mapList","currentMap","mapLoading","mapInfo","positionsList","robotInfo","positionType","NAV_POS_TYPE","PARK_POS_TYPE","CHARGE_POS_TYPE","ACTION_POS_TYPE","canvasCtx","methods","rediretorPosition","bigCanvas","littleCanvas","resetCanvas","changeMap","comfireModel","startPolling","polling","setInterval","onNavClick","res","destPosition","cmd","code","message","find","i","id","type","getCurrentRobotInfo","x","y","calculatePointPosition","console","log","robotId","drawPoint","mapName","containPixelData","length","width","resolution","height","drawMap","mapUrl","getMapPositions","posArray","forEach","item","getCanvasCtx","map","document","getElementById","ctx","getContext","clearCanvas","clearRect","onImageLoadCallback","img","Image","src","onload","complete","drawImage","onMapSWitchClick","origin","leftBottomX","leftBottomY","zoomScale","text","logoUrl","dottedSize","font","fillText","mounted","then","robotStatus","resultNotify","watch","newVal","oldVal","clearInterval"],"sourceRoot":"","sources":["D:\\Program Files\\web\\prj\\sendRobot\\src\\pages\\Dashboard\\components\\MapDashboard.vue"],"sourcesContent":["<template>\n  <div>\n    <div>\n      <div>\n        <div class=\"map-header\">\n          <div>\n            <span>地图列表</span>\n            <el-select\n              v-model=\"currentMap\"\n              class=\"m-2\"\n              placeholder=\"Select\"\n              size=\"large\"\n              style=\"margin-left: 10px\"\n            >\n              <el-option\n                v-for=\"(item, index) in mapList\"\n                :key=\"index\"\n                :label=\"item\"\n                :value=\"item\"\n              />\n            </el-select>\n            <el-button type=\"primary\" @click=\"changeMap\">切换地图</el-button>\n          </div>\n          <div>\n            当前地图：{{\n              this.robotInfo.map ? this.robotInfo.map : \"暂无\"\n            }}&nbsp;&nbsp;&nbsp;\n          </div>\n          <div class=\"map-footer\">\n            <span>目标站点</span>\n            <el-select\n              v-model=\"selectedPosition\"\n              class=\"m-2\"\n              placeholder=\"Select\"\n              size=\"large\"\n              style=\"margin-left: 10px\"\n            >\n              <el-option\n                v-for=\"item in positionsList\"\n                :key=\"item.id\"\n                :label=\"positionType[item.type]\"\n                :value=\"item.id\"\n              />\n            </el-select>\n            <el-button type=\"primary\" @click=\"onNavClick\">导航</el-button>\n            <el-button type=\"primary\" @click=\"rediretorPosition\"\n              >重定位</el-button\n            >\n          </div>\n          <el-dialog v-model=\"dialogVisible\" title=\"Tips\" width=\"30%\">\n            <span>确认切换地图吗？</span>\n            <template #footer>\n              <span class=\"dialog-footer\">\n                <el-button @click=\"dialogVisible = false\">取消</el-button>\n                <el-button type=\"primary\" @click=\"comfireModel\">确认</el-button>\n              </span>\n            </template>\n          </el-dialog>\n\n          <!-- <div\n            v-for=\"(i, index) in mapList\"\n            :key=\"i\"\n            @click=\"onMapSWitchClick(i)\"\n            :class=\"currentMap === i ? 'map-radio select' : 'map-radio'\"\n            :style=\"{\n              marginBottom: index === mapList.length - 1 ? 0 : '5px',\n            }\"\n          >\n            {{ i }}\n          </div> -->\n        </div>\n      </div>\n      <div className=\"map-container\" id=\"map-container\">\n        <!--  :width=\"canvasWidth\"\n          :height=\"canvasHeight\" -->\n        <canvas\n          id=\"map\"\n          :width=\"canvasWidth\"\n          :height=\"canvasHeight\"\n          style=\"border: 1px solid #ccc\"\n        ></canvas>\n        <div class=\"btn-box\">\n          <div @click=\"bigCanvas\"><img src=\"@/assets/images/big.png\" /></div>\n          <div @click=\"littleCanvas\">\n            <img src=\"@/assets/images/little.png\" />\n          </div>\n          <div @click=\"resetCanvas\">\n            <img src=\"@/assets/images/reset.png\" />\n          </div>\n        </div>\n        <div class=\"state-box\">\n          <ul>\n            <li>机器人状态：</li>\n            <li>机械臂处于原点：</li>\n            <li>AGV状态：</li>\n            <li>定位是否准确：</li>\n            <li>急停：</li>\n            <li>前方阻挡：</li>\n            <li>当前电量：</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n\n    <!-- <div className=\"right-area\">\n        <RobotOperation\n          :positionsList=\"positionsList\"\n          :drawPoint=\"drawPoint\"\n          :calculatePointPosition=\"calculatePointPosition\"\n          :initRobotInfo=\"robotInfo\"\n        />\n      </div> -->\n  </div>\n</template>\n\n<script>\n/* eslint-disable no-unused-vars */\nimport { ElMessage } from \"element-plus\";\nimport { toRaw } from \"@vue/reactivity\";\nimport RobotOperation from \"./RobotOperation.vue\";\nimport {\n  getMapList,\n  switchMap,\n  getMapInfo,\n  getPositions,\n  registerCallbackApi,\n} from \"@/service/map\";\nimport { getRobotInfoApi, robotNavigationApi } from \"@/service/robot\";\nexport default {\n  name: \"MapDashboard\",\n  // eslint-disable-next-line vue/no-unused-components\n  components: { RobotOperation },\n  data() {\n    return {\n      dialogVisible: false,\n      selectedPosition: \"\",\n      defaultMap: \"\",\n      logo: require(\"@/assets/logo.png\"),\n      robotLogo: require(\"@/assets/images/robot.png\"),\n      canvasWidth: 1000, //1200\n      canvasHeight: 500, //600\n      imgScale: 1, // 图片启示的缩放大小\n      count: 0, // 用来记录机器人的位置是否连续5次一样，5次一样的话停止轮询\n      mapList: [],\n      currentMap: \"\",\n      mapLoading: false,\n      mapInfo: {},\n      positionsList: [],\n      robotInfo: {},\n      positionType: {\n        NAV_POS_TYPE: \"导航点位\",\n        PARK_POS_TYPE: \"停车点位\",\n        CHARGE_POS_TYPE: \"充电点位\",\n        ACTION_POS_TYPE: \"工作点位\",\n      },\n      canvasCtx: \"\",\n    };\n  },\n  methods: {\n    \n    //todo 重定向\n    rediretorPosition() {},\n    bigCanvas() {\n      this.imgScale *= 1.1;\n      this.getMapInfo(this.currentMap);\n    },\n    littleCanvas() {\n      this.imgScale *= 0.9;\n      this.getMapInfo(this.currentMap);\n    },\n    resetCanvas() {\n      this.imgScale = 1;\n      this.getMapInfo(this.currentMap);\n    },\n    changeMap() {\n      this.dialogVisible = true;\n    },\n    comfireModel() {\n      //确认切换地图\n      this.getMapInfo(this.currentMap);\n    },\n    startPolling() {\n      this.polling = setInterval(() => {\n        this.getMapInfo(this.currentMap);\n      }, 3000); // 3秒查询一次\n    },\n    async onNavClick() {\n      if (this.selectedPosition) {\n        const res = await robotNavigationApi({\n          destPosition: this.selectedPosition,\n          cmd: 0,\n        });\n        const { data, code } = res;\n        // this.currentNavRequestId = data.requestId;\n        if (code === 0) {\n          ElMessage({\n            message: `导航开始，当前目标点：${\n              this.positionsList.find((i) => i.id === this.selectedPosition)\n                .type\n            }`,\n            type: \"success\",\n          });\n          this.startPolling();\n        }\n      } else {\n        ElMessage({\n          message: `请先选择一个导航点`,\n          type: \"warning\",\n        });\n      }\n    },\n    async getCurrentRobotInfo() {\n      const { data } = await getRobotInfoApi();\n      this.robotInfo = data;\n      // if (data.map == this.currentMap) {\n      const { x, y } = this.calculatePointPosition(data.x, data.y);\n      // 渲染机器人位置\n      console.log(\"渲染\", x, y);\n      console.log(\"this.robotInfo333\", this.robotInfo.robotId);\n      this.drawPoint(this.robotInfo.robotId, this.robotLogo, x, y, 40);\n      // }\n    },\n    async getMapList() {\n      const { data } = await getMapList();\n      console.log(\"getMapList\", data);\n      this.mapList = data.mapList;\n      this.currentMap = data.currentMap;\n      return data.mapList;\n    },\n    async getMapInfo(mapName) {\n      const { data } = await getMapInfo({\n        mapName,\n        containPixelData: true,\n      });\n      console.log(\"MapInfo\", data);\n      this.mapInfo = data;\n      // 获取到地图数据后渲染地图和相关位置点\n      if (this.mapList.length > 0) {\n        // let realWidth = data.width/data.resolution\n        // let realHeight = data.height/data.resolution\n        // let rate = realHeight/realWidth\n        this.canvasWidth = data.width / data.resolution;\n        this.canvasHeight = data.height / data.resolution;\n        this.dialogVisible = false;\n        this.drawMap(data.mapUrl, () => {\n          this.getMapPositions();\n        });\n      }\n    },\n    async getMapPositions() {\n      const { data } = await getPositions();\n      console.log(\"========getMapPositions\", data);\n      this.positionsList = data.posArray;\n      this.getCurrentRobotInfo();\n      data.posArray.forEach((item) => {\n        const { x, y } = this.calculatePointPosition(item.x, item.y);\n        // 渲染地图上的点\n        this.drawPoint(item.id, this.logo, x, y, 20);\n      });\n    },\n    getCanvasCtx() {\n      const map = document.getElementById(\"map\");\n      const ctx = map.getContext(\"2d\");\n      this.canvasCtx = ctx;\n    },\n    clearCanvas() {\n      // TODO 目前是清空整个canvas重绘 后续可以针对某个点清空重绘？\n      this.canvasCtx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    },\n    drawMap(mapUrl, onImageLoadCallback) {\n      const img = new Image();\n      img.src = mapUrl;\n      //  加载图片\n      img.onload = () => {\n        if (img.complete) {\n          this.canvasCtx.drawImage(\n            img,\n            0,\n            0,\n            this.canvasWidth * this.imgScale,\n            this.canvasHeight * this.imgScale\n          );\n          if (onImageLoadCallback) {\n            onImageLoadCallback();\n          }\n        }\n      };\n    },\n    async onMapSWitchClick(map) {\n      const { code } = await switchMap({ mapName: map });\n      if (code === 0) {\n        this.currentMap = map;\n      }\n    },\n    calculatePointPosition(x, y) {\n      // 给的是地图左下角的点，canvas原点在左上角\n      console.log(\"机器人\", x, y);\n      let origin = {\n        x: this.mapInfo.leftBottomX,\n        y: this.mapInfo.leftBottomY,\n      };\n      // 缩放倍数\n      let zoomScale = {\n        x: this.canvasWidth / this.mapInfo.width,\n        y: this.canvasHeight / this.mapInfo.height,\n      };\n      return {\n        x: (x - origin.x) / this.mapInfo.resolution,\n        y: (y - origin.y) / this.mapInfo.resolution,\n      };\n    },\n    drawPoint(text, logoUrl, x, y, dottedSize) {\n      const img = new Image();\n      img.src = logoUrl;\n      //  加载图片\n      img.onload = () => {\n        if (img.complete) {\n          this.canvasCtx.drawImage(img, x, y, dottedSize, dottedSize);\n          this.canvasCtx.font = \"12px bold 黑体\";\n          this.canvasCtx.fillText(text, x + dottedSize, y + dottedSize);\n          // if (onImageLoadCallback) {\n          //   onImageLoadCallback();\n          // }\n        }\n      };\n    },\n  },\n  mounted() {\n    this.getMapList().then((res) => {\n      console.log(\"res\", res);\n      this.getMapInfo(res[res.length - 1]);\n    });\n    this.getCurrentRobotInfo();\n    registerCallbackApi({\n      robotStatus: \"/robotStatus\",\n      resultNotify: \"/resultNotify\",\n    });\n    this.getCanvasCtx();\n    this.drawMap(this.defaultMap);\n  },\n  watch: {\n    // currentMap(newVal) {\n    //   this.getMapInfo(newVal);\n    // },\n    robotInfo(newVal, oldVal) {\n      // 如果位置五次都一样，停止轮询\n      if (newVal.x === oldVal.x && newVal.y === oldVal.y) {\n        this.count += 1;\n        if (this.count > 5) {\n          clearInterval(this.polling);\n          this.polling = null;\n        }\n      }\n    },\n  },\n};\n</script>\n\n<style scoped lang=\"scss\">\n.map-container {\n  width: \"100%\";\n  height: 500px;\n}\n.dashboard-container {\n  display: flex;\n  /* justify-content: space-between; */\n}\n.map-header {\n  position: fixed;\n  top: 20px;\n  width: 1264px;\n  height: 80px;\n  display: flex;\n  align-items: center;\n  /* justify-content: space-between; */\n  margin-bottom: 10px;\n  background: #fff;\n}\n.map-container {\n  margin-top: 80px;\n}\n.map-radio {\n  border: 1px solid #f0f0f0;\n  padding: 5px 14px;\n  cursor: pointer;\n}\n.map-radio:hover {\n  border: 1px solid #adbbff;\n  color: #adbbff;\n}\n.map-radio.select {\n  border: 1px solid #6882ff;\n  color: #6882ff;\n}\n.state-box {\n  position: absolute;\n  top: 115px;\n  right: 70px;\n  width: 228px;\n  height: 500px;\n  background: rgba(242, 245, 247, 0.5);\n  box-shadow: -2px 0px 4px rgba(0, 0, 0, 0.12);\n  border-radius: 6px 0px 0px 6px;\n}\n.state-box ul {\n  list-style: none;\n  line-height: 50px;\n}\n.btn-box {\n  position: absolute;\n  top: 120px;\n  left: 1100px;\n  div {\n    margin-top: 10px;\n  }\n}\n.el-button.el-button--primary {\n  margin-left: 20px;\n  margin-right: 20px;\n}\n</style>"]},"metadata":{},"sourceType":"module"}