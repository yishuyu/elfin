{"ast":null,"code":"// import { bigIcon, littleIcon, resetIcon } from \"@/icon/index\";\nexport default {\n  name: 'laborImage',\n  components: {// bigIcon,\n    // littleIcon,\n    // resetIcon\n  },\n\n  data() {\n    return {\n      canvasWidth: 2400,\n      // 画布大小\n      canvasHeight: 1400,\n      extraImgList: [{\n        url: require(\"@/assets/images/defaulmap.jpg\"),\n        x: 0,\n        y: 0,\n        width: 2400,\n        height: 1400\n      }, {\n        url: require(\"@/assets/images/robot.png\"),\n        x: 700,\n        y: 100,\n        width: 40,\n        height: 40\n      }],\n      myCanvas: null,\n      ctx: null,\n      imgObject: [],\n      imgX: 200,\n      // 图片在画布中渲染的起点x坐标\n      imgY: 100,\n      imgScale: 0.9 // 图片的缩放大小\n\n    };\n  },\n\n  mounted() {\n    this.myCanvas = this.$refs.bargraphCanvas;\n    this.ctx = this.myCanvas.getContext('2d');\n    this.loadImg();\n    this.canvasEventsInit();\n  },\n\n  methods: {\n    loadImg() {\n      var _this = this;\n\n      let extraImgList = _this.extraImgList;\n      let length = extraImgList.length;\n      var imageList = [];\n      let count = 0; //加载背景图片\n      // var isBgLoaded = false;\n\n      var img = new Image();\n      var bgImg = extraImgList[0];\n      img.src = bgImg.url;\n\n      img.onload = () => {\n        imageList.push({\n          img: img,\n          x: bgImg.x,\n          y: bgImg.y,\n          width: bgImg.width,\n          height: bgImg.height\n        });\n        ++count;\n\n        if (length > 1) {\n          //加载剩余图片\n          for (let key = 1; key < length; key++) {\n            let item = extraImgList[key];\n            let extarImg = new Image();\n            extarImg.src = item.url;\n\n            extarImg.onload = () => {\n              imageList.push({\n                img: extarImg,\n                x: item.x,\n                y: item.y,\n                width: item.width,\n                height: item.height\n              });\n\n              if (++count >= length) {\n                _this.imgObject = imageList;\n\n                _this.drawImage(imageList);\n              }\n            };\n          }\n        } else {\n          _this.imgObject = imageList;\n\n          _this.drawImage(imageList);\n        }\n      };\n    },\n\n    drawImage(imgList) {\n      var _this = this;\n\n      _this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n      for (let i = 0; i < imgList.length; i++) {\n        _this.ctx.drawImage(imgList[i].img, //规定要使用的图片\n        _this.imgX + imgList[i].x * _this.imgScale, _this.imgY + imgList[i].y * _this.imgScale, //在画布上放置图像的 x 、y坐标位置。\n        imgList[i].width * _this.imgScale, imgList[i].height * _this.imgScale //要使用的图像的宽度、高度\n        );\n      } // this.ctx.font=\"15px Arial\";\n      // this.ctx.fillStyle = \"black\"\n      // this.ctx.fillText(\"name\",this.imgX + 120 * this.imgScale, this.imgY+ 25 * this.imgScale);\n\n    },\n\n    /**\r\n     * 为画布上鼠标的拖动和缩放注册事件\r\n    */\n    clickbig() {\n      console.log(11111);\n      this.imgScale *= 1.1;\n      this.drawImage(this.imgObject);\n    },\n\n    canvasEventsInit() {\n      var _this = this;\n\n      var canvas = _this.myCanvas;\n\n      canvas.onmousedown = function (event) {\n        console.log(\"onmousedown\");\n        var imgx = _this.imgX;\n        var imgy = _this.imgY;\n        var pos = {\n          x: event.clientX,\n          y: event.clientY\n        }; //坐标转换，将窗口坐标转换成canvas的坐标\n\n        canvas.onmousemove = function (evt) {\n          //移动\n          console.log(\"onmousemove\");\n          canvas.style.cursor = 'move';\n          var x = (evt.clientX - pos.x) * 2 + imgx;\n          var y = (evt.clientY - pos.y) * 2 + imgy;\n          _this.imgX = x;\n          _this.imgY = y;\n\n          _this.drawImage(_this.imgObject); //重新绘制图片\n\n        };\n\n        canvas.onmouseup = function () {\n          console.log(\"onmouseup\");\n          canvas.onmousemove = null;\n          canvas.onmouseup = null;\n          canvas.style.cursor = 'default';\n        };\n      };\n\n      canvas.onmousewheel = canvas.onwheel = function (event) {\n        //滚轮放大缩小\n        var wheelDelta = event.wheelDelta ? event.wheelDelta : event.deltalY * -40; //获取当前鼠标的滚动情况\n\n        if (wheelDelta > 0) {\n          _this.imgScale *= 1.1;\n        } else {\n          if (_this.imgScale > 0.9) {\n            _this.imgScale *= 0.9;\n          }\n        }\n\n        _this.drawImage(_this.imgObject); //重新绘制图片\n\n\n        event.preventDefault && event.preventDefault();\n        return false;\n      };\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["name","components","data","canvasWidth","canvasHeight","extraImgList","url","require","x","y","width","height","myCanvas","ctx","imgObject","imgX","imgY","imgScale","mounted","$refs","bargraphCanvas","getContext","loadImg","canvasEventsInit","methods","_this","length","imageList","count","img","Image","bgImg","src","onload","push","key","item","extarImg","drawImage","imgList","clearRect","i","clickbig","console","log","canvas","onmousedown","event","imgx","imgy","pos","clientX","clientY","onmousemove","evt","style","cursor","onmouseup","onmousewheel","onwheel","wheelDelta","deltalY","preventDefault"],"sourceRoot":"","sources":["D:\\Program Files\\web\\prj\\sendRobot\\src\\pages\\Dashboard\\components\\TestCanvas.vue"],"sourcesContent":["<template>\r\n  <div>\r\n      <canvas ref=\"bargraphCanvas\" :width=\"canvasWidth\" :height=\"canvasHeight\" :style=\"'width:'+canvasWidth/2+'px;height:'+canvasHeight/2+'px;'\"></canvas>\r\n      <div class=\"img\" @click=\"clickbig\"> <img src=\"@/assets/images/big.png\" /></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// import { bigIcon, littleIcon, resetIcon } from \"@/icon/index\";\r\n  export default {\r\n    name: 'laborImage',\r\n    components: {\r\n        // bigIcon,\r\n        // littleIcon,\r\n        // resetIcon\r\n    },\r\n    data() {\r\n      return {\r\n        canvasWidth: 2400, // 画布大小\r\n        canvasHeight: 1400,\r\n        extraImgList: [\r\n            {url:require(\"@/assets/images/defaulmap.jpg\"), x: 0, y: 0, width: 2400, height: 1400},\r\n            {url:require(\"@/assets/images/robot.png\"), x: 700, y: 100, width: 40, height: 40} ,\r\n        ],\r\n        myCanvas: null,\r\n        ctx: null,\r\n        imgObject: [],\r\n        imgX: 200, // 图片在画布中渲染的起点x坐标\r\n        imgY: 100,\r\n        imgScale: 0.9, // 图片的缩放大小\r\n      }\r\n    },\r\n    mounted() {\r\n      this.myCanvas = this.$refs.bargraphCanvas;\r\n      this.ctx = this.myCanvas.getContext('2d');\r\n      this.loadImg();\r\n      this.canvasEventsInit();\r\n    },\r\n    methods: {\r\n      loadImg() {\r\n        var _this = this;\r\n        let extraImgList = _this.extraImgList;\r\n        let length = extraImgList.length;\r\n        var imageList = [];\r\n        let count = 0;\r\n        //加载背景图片\r\n        // var isBgLoaded = false;\r\n        var img = new Image();\r\n        var bgImg = extraImgList[0];\r\n        img.src = bgImg.url;\r\n        img.onload = () => {\r\n          imageList.push({img: img, x: bgImg.x, y: bgImg.y, width: bgImg.width, height: bgImg.height});\r\n          ++count;\r\n          if(length > 1) {\r\n            //加载剩余图片\r\n            for(let key = 1; key < length; key++) {\r\n              let item = extraImgList[key];\r\n              let extarImg = new Image();\r\n              extarImg.src = item.url;\r\n              extarImg.onload = () => {\r\n                imageList.push({img: extarImg, x: item.x, y: item.y, width: item.width, height: item.height})\r\n                if(++count >= length) {\r\n                  _this.imgObject = imageList;\r\n                  _this.drawImage(imageList);\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            _this.imgObject = imageList;\r\n             _this.drawImage(imageList);\r\n          }\r\n        }\r\n      },\r\n      drawImage(imgList) {\r\n        var _this = this;\r\n        _this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\r\n        for(let i = 0; i < imgList.length; i++) {\r\n          _this.ctx.drawImage(\r\n            imgList[i].img, //规定要使用的图片\r\n            _this.imgX + imgList[i].x * _this.imgScale, _this.imgY+ imgList[i].y * _this.imgScale,//在画布上放置图像的 x 、y坐标位置。\r\n            imgList[i].width*_this.imgScale, imgList[i].height*_this.imgScale //要使用的图像的宽度、高度\r\n          );\r\n        }\r\n        // this.ctx.font=\"15px Arial\";\r\n        // this.ctx.fillStyle = \"black\"\r\n        // this.ctx.fillText(\"name\",this.imgX + 120 * this.imgScale, this.imgY+ 25 * this.imgScale);\r\n      },\r\n      /**\r\n       * 为画布上鼠标的拖动和缩放注册事件\r\n      */\r\n     clickbig(){\r\n         console.log(11111)\r\n          this.imgScale *= 1.1;\r\n          this.drawImage(this.imgObject);\r\n     },\r\n      canvasEventsInit() {\r\n        var _this = this;\r\n        var canvas = _this.myCanvas;\r\n       \r\n        canvas.onmousedown = function (event) {\r\n          console.log(\"onmousedown\")\r\n          var imgx = _this.imgX;\r\n          var imgy = _this.imgY;\r\n          var pos = {x:event.clientX, y:event.clientY};  //坐标转换，将窗口坐标转换成canvas的坐标\r\n          canvas.onmousemove = function (evt) {  //移动\r\n           console.log(\"onmousemove\")\r\n            canvas.style.cursor = 'move';\r\n\r\n            var x = (evt.clientX - pos.x) * 2 + imgx;\r\n            var y = (evt.clientY - pos.y) * 2 + imgy;\r\n            _this.imgX  = x;\r\n            _this.imgY  = y;\r\n            _this.drawImage(_this.imgObject);  //重新绘制图片\r\n          };\r\n          canvas.onmouseup = function () {\r\n              console.log(\"onmouseup\")\r\n            canvas.onmousemove = null;\r\n            canvas.onmouseup = null;\r\n            canvas.style.cursor = 'default';\r\n          };\r\n        };\r\n  \r\n        canvas.onmousewheel = canvas.onwheel = function (event) {    //滚轮放大缩小\r\n          var wheelDelta = event.wheelDelta ? event.wheelDelta : (event.deltalY * (-40));  //获取当前鼠标的滚动情况\r\n          if (wheelDelta > 0) {\r\n              _this.imgScale *= 1.1;\r\n          } else {\r\n              if(_this.imgScale > 0.9) {\r\n                 _this.imgScale *= 0.9;\r\n              }\r\n          }\r\n          _this.drawImage(_this.imgObject);   //重新绘制图片\r\n          event.preventDefault  && event.preventDefault();\r\n          return false;\r\n        };\r\n      },\r\n    },\r\n  }\r\n</script>\r\n<style scoped>\r\n.img{\r\n    position: absolute;\r\n    right:200px;\r\n    top: 100px;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}